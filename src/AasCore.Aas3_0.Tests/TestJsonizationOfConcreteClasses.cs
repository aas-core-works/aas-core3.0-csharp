/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed
using Directory = System.IO.Directory;
using Nodes = System.Text.Json.Nodes;
using Path = System.IO.Path;

using System.Collections.Generic;  // can't alias
using System.Linq;  // can't alias
using NUnit.Framework; // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestJsonizationOfConcreteClasses
    {
        private static void AssertSerializeDeserializeEqualsOriginal(
            Nodes.JsonNode originalNode, Aas.IClass instance, string path)
        {
            Nodes.JsonObject? serialized = null;
            try
            {
                serialized = Aas.Jsonization.Serialize.ToJsonObject(instance);
            }
            catch (System.Exception exception)
            {
                Assert.Fail(
                    "Expected no exception upon serialization of an instance " +
                    $"de-serialized from {path}, but got: {exception}"
                );
            }

            if (serialized == null)
            {
                Assert.Fail(
                    $"Unexpected null serialization of an instance from {path}"
                );
            }
            else
            {
                Aas.Tests.CommonJson.CheckJsonNodesEqual(
                    originalNode,
                    serialized,
                    out Reporting.Error? inequalityError);
                if (inequalityError != null)
                {
                    Assert.Fail(
                        $"The original JSON from {path} is unequal the serialized JSON: " +
                        $"{Reporting.GenerateJsonPath(inequalityError.PathSegments)}: " +
                        inequalityError.Cause
                    );
                }
            }
        }

        private static readonly List<string> CausesForDeserializationFailure = (
            new List<string>()
            {
                "TypeViolation",
                "RequiredViolation",
                "EnumViolation",
                "NullViolation",
                "UnexpectedAdditionalProperty"
            });

        private static void AssertEqualsExpectedOrRerecordDeserializationException(
            Aas.Jsonization.Exception? exception,
            string path)
        {
            if (exception == null)
            {
                Assert.Fail(
                    $"Expected a Jsonization exception when de-serializing {path}, but got none."
                );
            }
            else
            {
                string exceptionPath = path + ".exception";
                string got = exception.Message;
                if (Aas.Tests.Common.RecordMode)
                {
                    System.IO.File.WriteAllText(exceptionPath, got);
                }
                else
                {
                    if (!System.IO.File.Exists(exceptionPath))
                    {
                        throw new System.IO.FileNotFoundException(
                            $"The file with the recorded exception does not exist: {exceptionPath}");
                    }

                    string expected = System.IO.File.ReadAllText(exceptionPath);
                    Assert.AreEqual(
                        expected.Replace("\r\n", "\n"),
                        got.Replace("\r\n", "\n"),
                        $"The expected exception does not match the actual one for the file {path}");
                }
            }
        }

        [Test]
        public void Test_Extension_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Extension"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Extension_ok

        [Test]
        public void Test_Extension_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ExtensionFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Extension_deserialization_from_non_object_fail

        [Test]
        public void Test_Extension_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Extension");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Extension for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Extension_deserialization_fail

        [Test]
        public void Test_Extension_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Extension"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Extension for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Extension_verification_fail

        [Test]
        public void Test_AdministrativeInformation_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "AdministrativeInformation"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_AdministrativeInformation_ok

        [Test]
        public void Test_AdministrativeInformation_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.AdministrativeInformationFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_AdministrativeInformation_deserialization_from_non_object_fail

        [Test]
        public void Test_AdministrativeInformation_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AdministrativeInformation");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AdministrativeInformation for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AdministrativeInformation_deserialization_fail

        [Test]
        public void Test_AdministrativeInformation_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AdministrativeInformation"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AdministrativeInformation for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AdministrativeInformation_verification_fail

        [Test]
        public void Test_Qualifier_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Qualifier"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Qualifier_ok

        [Test]
        public void Test_Qualifier_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.QualifierFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Qualifier_deserialization_from_non_object_fail

        [Test]
        public void Test_Qualifier_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Qualifier");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Qualifier for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Qualifier_deserialization_fail

        [Test]
        public void Test_Qualifier_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Qualifier"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Qualifier for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Qualifier_verification_fail

        [Test]
        public void Test_AssetAdministrationShell_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "AssetAdministrationShell"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_AssetAdministrationShell_ok

        [Test]
        public void Test_AssetAdministrationShell_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.AssetAdministrationShellFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_AssetAdministrationShell_deserialization_from_non_object_fail

        [Test]
        public void Test_AssetAdministrationShell_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AssetAdministrationShell");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetAdministrationShell for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AssetAdministrationShell_deserialization_fail

        [Test]
        public void Test_AssetAdministrationShell_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AssetAdministrationShell"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetAdministrationShell for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AssetAdministrationShell_verification_fail

        [Test]
        public void Test_AssetInformation_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "AssetInformation"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_AssetInformation_ok

        [Test]
        public void Test_AssetInformation_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.AssetInformationFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_AssetInformation_deserialization_from_non_object_fail

        [Test]
        public void Test_AssetInformation_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AssetInformation");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetInformation for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AssetInformation_deserialization_fail

        [Test]
        public void Test_AssetInformation_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AssetInformation"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetInformation for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AssetInformation_verification_fail

        [Test]
        public void Test_Resource_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Resource"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Resource_ok

        [Test]
        public void Test_Resource_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ResourceFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Resource_deserialization_from_non_object_fail

        [Test]
        public void Test_Resource_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Resource");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Resource for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Resource_deserialization_fail

        [Test]
        public void Test_Resource_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Resource"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Resource for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Resource_verification_fail

        [Test]
        public void Test_SpecificAssetId_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "SpecificAssetID"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_SpecificAssetId_ok

        [Test]
        public void Test_SpecificAssetId_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.SpecificAssetIdFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_SpecificAssetId_deserialization_from_non_object_fail

        [Test]
        public void Test_SpecificAssetId_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "SpecificAssetID");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of SpecificAssetId for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_SpecificAssetId_deserialization_fail

        [Test]
        public void Test_SpecificAssetId_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "SpecificAssetID"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of SpecificAssetId for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_SpecificAssetId_verification_fail

        [Test]
        public void Test_Submodel_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Submodel"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Submodel_ok

        [Test]
        public void Test_Submodel_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.SubmodelFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Submodel_deserialization_from_non_object_fail

        [Test]
        public void Test_Submodel_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Submodel");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Submodel for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Submodel_deserialization_fail

        [Test]
        public void Test_Submodel_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Submodel"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Submodel for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Submodel_verification_fail

        [Test]
        public void Test_RelationshipElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "RelationshipElement"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_RelationshipElement_ok

        [Test]
        public void Test_RelationshipElement_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.RelationshipElementFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_RelationshipElement_deserialization_from_non_object_fail

        [Test]
        public void Test_RelationshipElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "RelationshipElement");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of RelationshipElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_RelationshipElement_deserialization_fail

        [Test]
        public void Test_RelationshipElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "RelationshipElement"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of RelationshipElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_RelationshipElement_verification_fail

        [Test]
        public void Test_SubmodelElementList_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "SubmodelElementList"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_SubmodelElementList_ok

        [Test]
        public void Test_SubmodelElementList_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.SubmodelElementListFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_SubmodelElementList_deserialization_from_non_object_fail

        [Test]
        public void Test_SubmodelElementList_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "SubmodelElementList");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementList for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_SubmodelElementList_deserialization_fail

        [Test]
        public void Test_SubmodelElementList_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "SubmodelElementList"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementList for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_SubmodelElementList_verification_fail

        [Test]
        public void Test_SubmodelElementCollection_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "SubmodelElementCollection"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_SubmodelElementCollection_ok

        [Test]
        public void Test_SubmodelElementCollection_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.SubmodelElementCollectionFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_SubmodelElementCollection_deserialization_from_non_object_fail

        [Test]
        public void Test_SubmodelElementCollection_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "SubmodelElementCollection");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementCollection for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_SubmodelElementCollection_deserialization_fail

        [Test]
        public void Test_SubmodelElementCollection_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "SubmodelElementCollection"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementCollection for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_SubmodelElementCollection_verification_fail

        [Test]
        public void Test_Property_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Property"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Property_ok

        [Test]
        public void Test_Property_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.PropertyFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Property_deserialization_from_non_object_fail

        [Test]
        public void Test_Property_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Property");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Property for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Property_deserialization_fail

        [Test]
        public void Test_Property_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Property"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Property for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Property_verification_fail

        [Test]
        public void Test_MultiLanguageProperty_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "MultiLanguageProperty"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_MultiLanguageProperty_ok

        [Test]
        public void Test_MultiLanguageProperty_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.MultiLanguagePropertyFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_MultiLanguageProperty_deserialization_from_non_object_fail

        [Test]
        public void Test_MultiLanguageProperty_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "MultiLanguageProperty");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of MultiLanguageProperty for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_MultiLanguageProperty_deserialization_fail

        [Test]
        public void Test_MultiLanguageProperty_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "MultiLanguageProperty"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of MultiLanguageProperty for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_MultiLanguageProperty_verification_fail

        [Test]
        public void Test_Range_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Range"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Range_ok

        [Test]
        public void Test_Range_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.RangeFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Range_deserialization_from_non_object_fail

        [Test]
        public void Test_Range_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Range");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Range for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Range_deserialization_fail

        [Test]
        public void Test_Range_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Range"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Range for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Range_verification_fail

        [Test]
        public void Test_ReferenceElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "ReferenceElement"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_ReferenceElement_ok

        [Test]
        public void Test_ReferenceElement_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ReferenceElementFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_ReferenceElement_deserialization_from_non_object_fail

        [Test]
        public void Test_ReferenceElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ReferenceElement");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ReferenceElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ReferenceElement_deserialization_fail

        [Test]
        public void Test_ReferenceElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ReferenceElement"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ReferenceElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ReferenceElement_verification_fail

        [Test]
        public void Test_Blob_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Blob"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Blob_ok

        [Test]
        public void Test_Blob_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.BlobFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Blob_deserialization_from_non_object_fail

        [Test]
        public void Test_Blob_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Blob");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Blob for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Blob_deserialization_fail

        [Test]
        public void Test_Blob_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Blob"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Blob for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Blob_verification_fail

        [Test]
        public void Test_File_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "File"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_File_ok

        [Test]
        public void Test_File_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.FileFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_File_deserialization_from_non_object_fail

        [Test]
        public void Test_File_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "File");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of File for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_File_deserialization_fail

        [Test]
        public void Test_File_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "File"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of File for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_File_verification_fail

        [Test]
        public void Test_AnnotatedRelationshipElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "AnnotatedRelationshipElement"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_AnnotatedRelationshipElement_ok

        [Test]
        public void Test_AnnotatedRelationshipElement_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.AnnotatedRelationshipElementFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_AnnotatedRelationshipElement_deserialization_from_non_object_fail

        [Test]
        public void Test_AnnotatedRelationshipElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AnnotatedRelationshipElement");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AnnotatedRelationshipElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AnnotatedRelationshipElement_deserialization_fail

        [Test]
        public void Test_AnnotatedRelationshipElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "AnnotatedRelationshipElement"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of AnnotatedRelationshipElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AnnotatedRelationshipElement_verification_fail

        [Test]
        public void Test_Entity_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Entity"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Entity_ok

        [Test]
        public void Test_Entity_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.EntityFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Entity_deserialization_from_non_object_fail

        [Test]
        public void Test_Entity_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Entity");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Entity for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Entity_deserialization_fail

        [Test]
        public void Test_Entity_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Entity"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Entity for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Entity_verification_fail

        [Test]
        public void Test_EventPayload_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "SelfContained", 
                    "Expected",
                    "EventPayload"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var instance = Aas.Jsonization.Deserialize.EventPayloadFrom(
                    node);

                var errors = Aas.Verification.Verify(instance).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, instance, path);
            }
        }  // public void Test_EventPayload_ok

        [Test]
        public void Test_EventPayload_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "SelfContained", 
                    "Unexpected", 
                    cause,
                    "EventPayload"
                );
         
                if (!Directory.Exists(baseDir))
                {
                    // No examples of EventPayload for the failure cause.
                    continue;
                } 
        
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EventPayloadFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_EventPayload_deserialization_fail

        [Test]
        public void Test_EventPayload_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "SelfContained", 
                    "Unexpected", 
                    cause,
                    "EventPayload"
                );
         
                if (!Directory.Exists(baseDir))
                {
                    // No examples of EventPayload for the failure cause.
                    continue;
                }
        
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var instance = Aas.Jsonization.Deserialize.EventPayloadFrom(
                        node);
 
                    var errors = Aas.Verification.Verify(instance).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_EventPayload_verification_fail

        [Test]
        public void Test_BasicEventElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "BasicEventElement"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_BasicEventElement_ok

        [Test]
        public void Test_BasicEventElement_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.BasicEventElementFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_BasicEventElement_deserialization_from_non_object_fail

        [Test]
        public void Test_BasicEventElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "BasicEventElement");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of BasicEventElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_BasicEventElement_deserialization_fail

        [Test]
        public void Test_BasicEventElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "BasicEventElement"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of BasicEventElement for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_BasicEventElement_verification_fail

        [Test]
        public void Test_Operation_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Operation"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Operation_ok

        [Test]
        public void Test_Operation_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.OperationFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Operation_deserialization_from_non_object_fail

        [Test]
        public void Test_Operation_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Operation");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Operation for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Operation_deserialization_fail

        [Test]
        public void Test_Operation_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Operation"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Operation for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Operation_verification_fail

        [Test]
        public void Test_OperationVariable_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "OperationVariable"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_OperationVariable_ok

        [Test]
        public void Test_OperationVariable_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.OperationVariableFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_OperationVariable_deserialization_from_non_object_fail

        [Test]
        public void Test_OperationVariable_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "OperationVariable");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of OperationVariable for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_OperationVariable_deserialization_fail

        [Test]
        public void Test_OperationVariable_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "OperationVariable"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of OperationVariable for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_OperationVariable_verification_fail

        [Test]
        public void Test_Capability_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Capability"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Capability_ok

        [Test]
        public void Test_Capability_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.CapabilityFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Capability_deserialization_from_non_object_fail

        [Test]
        public void Test_Capability_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Capability");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Capability for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Capability_deserialization_fail

        [Test]
        public void Test_Capability_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Capability"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Capability for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Capability_verification_fail

        [Test]
        public void Test_ConceptDescription_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "ConceptDescription"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_ConceptDescription_ok

        [Test]
        public void Test_ConceptDescription_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ConceptDescriptionFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_ConceptDescription_deserialization_from_non_object_fail

        [Test]
        public void Test_ConceptDescription_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ConceptDescription");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ConceptDescription for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ConceptDescription_deserialization_fail

        [Test]
        public void Test_ConceptDescription_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ConceptDescription"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ConceptDescription for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ConceptDescription_verification_fail

        [Test]
        public void Test_Reference_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Reference"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Reference_ok

        [Test]
        public void Test_Reference_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ReferenceFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Reference_deserialization_from_non_object_fail

        [Test]
        public void Test_Reference_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Reference");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Reference for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Reference_deserialization_fail

        [Test]
        public void Test_Reference_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Reference"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Reference for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Reference_verification_fail

        [Test]
        public void Test_Key_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "Key"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_Key_ok

        [Test]
        public void Test_Key_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.KeyFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_Key_deserialization_from_non_object_fail

        [Test]
        public void Test_Key_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Key");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Key for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Key_deserialization_fail

        [Test]
        public void Test_Key_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "Key"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Key for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Key_verification_fail

        [Test]
        public void Test_LangStringNameType_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "LangStringNameType"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_LangStringNameType_ok

        [Test]
        public void Test_LangStringNameType_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.LangStringNameTypeFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_LangStringNameType_deserialization_from_non_object_fail

        [Test]
        public void Test_LangStringNameType_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringNameType");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringNameType for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringNameType_deserialization_fail

        [Test]
        public void Test_LangStringNameType_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringNameType"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringNameType for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringNameType_verification_fail

        [Test]
        public void Test_LangStringTextType_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "LangStringTextType"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_LangStringTextType_ok

        [Test]
        public void Test_LangStringTextType_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.LangStringTextTypeFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_LangStringTextType_deserialization_from_non_object_fail

        [Test]
        public void Test_LangStringTextType_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringTextType");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringTextType for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringTextType_deserialization_fail

        [Test]
        public void Test_LangStringTextType_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringTextType"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringTextType for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringTextType_verification_fail

        [Test]
        public void Test_Environment_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "SelfContained", 
                    "Expected",
                    "Environment"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var instance = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(instance).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, instance, path);
            }
        }  // public void Test_Environment_ok

        [Test]
        public void Test_Environment_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "SelfContained", 
                    "Unexpected", 
                    cause,
                    "Environment"
                );
         
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Environment for the failure cause.
                    continue;
                } 
        
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Environment_deserialization_fail

        [Test]
        public void Test_Environment_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "SelfContained", 
                    "Unexpected", 
                    cause,
                    "Environment"
                );
         
                if (!Directory.Exists(baseDir))
                {
                    // No examples of Environment for the failure cause.
                    continue;
                }
        
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var instance = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);
 
                    var errors = Aas.Verification.Verify(instance).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Environment_verification_fail

        [Test]
        public void Test_EmbeddedDataSpecification_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "EmbeddedDataSpecification"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_EmbeddedDataSpecification_ok

        [Test]
        public void Test_EmbeddedDataSpecification_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.EmbeddedDataSpecificationFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_EmbeddedDataSpecification_deserialization_from_non_object_fail

        [Test]
        public void Test_EmbeddedDataSpecification_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "EmbeddedDataSpecification");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of EmbeddedDataSpecification for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_EmbeddedDataSpecification_deserialization_fail

        [Test]
        public void Test_EmbeddedDataSpecification_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "EmbeddedDataSpecification"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of EmbeddedDataSpecification for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_EmbeddedDataSpecification_verification_fail

        [Test]
        public void Test_LevelType_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "LevelType"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_LevelType_ok

        [Test]
        public void Test_LevelType_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.LevelTypeFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_LevelType_deserialization_from_non_object_fail

        [Test]
        public void Test_LevelType_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LevelType");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LevelType for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LevelType_deserialization_fail

        [Test]
        public void Test_LevelType_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LevelType"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LevelType for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LevelType_verification_fail

        [Test]
        public void Test_ValueReferencePair_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "ValueReferencePair"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_ValueReferencePair_ok

        [Test]
        public void Test_ValueReferencePair_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ValueReferencePairFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_ValueReferencePair_deserialization_from_non_object_fail

        [Test]
        public void Test_ValueReferencePair_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ValueReferencePair");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueReferencePair for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ValueReferencePair_deserialization_fail

        [Test]
        public void Test_ValueReferencePair_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ValueReferencePair"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueReferencePair for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ValueReferencePair_verification_fail

        [Test]
        public void Test_ValueList_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "ValueList"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_ValueList_ok

        [Test]
        public void Test_ValueList_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.ValueListFrom(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_ValueList_deserialization_from_non_object_fail

        [Test]
        public void Test_ValueList_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ValueList");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueList for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ValueList_deserialization_fail

        [Test]
        public void Test_ValueList_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "ValueList"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueList for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ValueList_verification_fail

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "LangStringPreferredNameTypeIEC61360"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_ok

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.LangStringPreferredNameTypeIec61360From(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_deserialization_from_non_object_fail

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringPreferredNameTypeIEC61360");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringPreferredNameTypeIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_deserialization_fail

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringPreferredNameTypeIEC61360"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringPreferredNameTypeIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_verification_fail

        [Test]
        public void Test_LangStringShortNameTypeIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "LangStringShortNameTypeIEC61360"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_LangStringShortNameTypeIec61360_ok

        [Test]
        public void Test_LangStringShortNameTypeIec61360_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.LangStringShortNameTypeIec61360From(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_LangStringShortNameTypeIec61360_deserialization_from_non_object_fail

        [Test]
        public void Test_LangStringShortNameTypeIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringShortNameTypeIEC61360");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringShortNameTypeIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringShortNameTypeIec61360_deserialization_fail

        [Test]
        public void Test_LangStringShortNameTypeIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringShortNameTypeIEC61360"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringShortNameTypeIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringShortNameTypeIec61360_verification_fail

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "LangStringDefinitionTypeIEC61360"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_ok

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.LangStringDefinitionTypeIec61360From(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_deserialization_from_non_object_fail

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringDefinitionTypeIEC61360");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringDefinitionTypeIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_deserialization_fail

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "LangStringDefinitionTypeIEC61360"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringDefinitionTypeIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_verification_fail

        [Test]
        public void Test_DataSpecificationIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Expected",
                    "DataSpecificationIEC61360"
                ),
                "*.json",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                var node = Aas.Tests.CommonJson.ReadFromFile(path);

                var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                    node);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    node, container, path);
            }
        }  // public void Test_DataSpecificationIec61360_ok

        [Test]
        public void Test_DataSpecificationIec61360_deserialization_from_non_object_fail()
        {
            var node = Nodes.JsonValue.Create("INVALID") 
                ?? throw new System.InvalidOperationException(
                    "Unexpected failure of the node creation");

            Aas.Jsonization.Exception? exception = null;
            try
            {
                var _ = Aas.Jsonization.Deserialize.DataSpecificationIec61360From(
                    node);
            }
            catch (Aas.Jsonization.Exception observedException)
            {
                exception = observedException;
            }

            if (exception == null)
            {
                throw new AssertionException("Expected an exception, but got none");
            }

            if (!exception.Message.StartsWith("Expected a JsonObject, but got "))
            {
                throw new AssertionException(
                    $"Unexpected exception message: {exception.Message}");
            }
        }  // public void Test_DataSpecificationIec61360_deserialization_from_non_object_fail

        [Test]
        public void Test_DataSpecificationIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "DataSpecificationIEC61360");
            
                if (!Directory.Exists(baseDir))
                {
                    // No examples of DataSpecificationIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    Aas.Jsonization.Exception? exception = null;
                    try
                    {
                        var _ = Aas.Jsonization.Deserialize.EnvironmentFrom(
                            node);
                    }
                    catch (Aas.Jsonization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_DataSpecificationIec61360_deserialization_fail

        [Test]
        public void Test_DataSpecificationIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Json", 
                    "ContainedInEnvironment", 
                    "Unexpected", 
                    cause,
                    "DataSpecificationIEC61360"
                );
    
                if (!Directory.Exists(baseDir))
                {
                    // No examples of DataSpecificationIec61360 for the failure cause.
                    continue;
                }
    
                var paths = Directory.GetFiles(
                    baseDir,
                    "*.json",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    var node = Aas.Tests.CommonJson.ReadFromFile(path);

                    var container = Aas.Jsonization.Deserialize.EnvironmentFrom(
                        node);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_DataSpecificationIec61360_verification_fail
    }  // class TestJsonizationOfConcreteClasses
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
