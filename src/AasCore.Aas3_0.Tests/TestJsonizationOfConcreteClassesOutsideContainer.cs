/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

using NUnit.Framework; // can't alias

namespace AasCore.Aas3_0.Tests
{
    /// <summary>
    /// Test de/serialization of classes contained in a container <i>outside</i>
    /// of that container.
    /// </summary>
    /// <remarks>
    /// This is necessary so that we also test the methods that directly de/serialize
    /// an instance in rare use cases where it does not reside within a container such
    /// as <see cref="Aas.Environment" />.
    /// </remarks>
    public class TestJsonizationOfConcreteClassesOutsideContainer
    {
        [Test]
        public void Test_round_trip_Extension()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalExtension();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ExtensionFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Extension, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Extension

        [Test]
        public void Test_round_trip_AdministrativeInformation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAdministrativeInformation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.AdministrativeInformationFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as AdministrativeInformation, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_AdministrativeInformation

        [Test]
        public void Test_round_trip_Qualifier()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalQualifier();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.QualifierFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Qualifier, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Qualifier

        [Test]
        public void Test_round_trip_AssetAdministrationShell()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.AssetAdministrationShellFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as AssetAdministrationShell, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_AssetAdministrationShell

        [Test]
        public void Test_round_trip_AssetInformation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetInformation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.AssetInformationFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as AssetInformation, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_AssetInformation

        [Test]
        public void Test_round_trip_Resource()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalResource();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ResourceFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Resource, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Resource

        [Test]
        public void Test_round_trip_SpecificAssetId()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSpecificAssetId();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.SpecificAssetIdFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as SpecificAssetId, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_SpecificAssetId

        [Test]
        public void Test_round_trip_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.SubmodelFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Submodel, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Submodel

        [Test]
        public void Test_round_trip_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.RelationshipElementFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as RelationshipElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_RelationshipElement

        [Test]
        public void Test_round_trip_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.SubmodelElementListFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as SubmodelElementList, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_SubmodelElementList

        [Test]
        public void Test_round_trip_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.SubmodelElementCollectionFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as SubmodelElementCollection, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_SubmodelElementCollection

        [Test]
        public void Test_round_trip_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.PropertyFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Property, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Property

        [Test]
        public void Test_round_trip_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.MultiLanguagePropertyFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as MultiLanguageProperty, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_MultiLanguageProperty

        [Test]
        public void Test_round_trip_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.RangeFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Range, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Range

        [Test]
        public void Test_round_trip_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ReferenceElementFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as ReferenceElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_ReferenceElement

        [Test]
        public void Test_round_trip_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.BlobFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Blob, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Blob

        [Test]
        public void Test_round_trip_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.FileFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as File, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_File

        [Test]
        public void Test_round_trip_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.AnnotatedRelationshipElementFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as AnnotatedRelationshipElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.EntityFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Entity, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Entity

        [Test]
        public void Test_round_trip_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.BasicEventElementFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as BasicEventElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_BasicEventElement

        [Test]
        public void Test_round_trip_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.OperationFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Operation, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Operation

        [Test]
        public void Test_round_trip_OperationVariable()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperationVariable();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.OperationVariableFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as OperationVariable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_OperationVariable

        [Test]
        public void Test_round_trip_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.CapabilityFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Capability, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Capability

        [Test]
        public void Test_round_trip_ConceptDescription()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalConceptDescription();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ConceptDescriptionFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as ConceptDescription, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_ConceptDescription

        [Test]
        public void Test_round_trip_Reference()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReference();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ReferenceFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Reference, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Reference

        [Test]
        public void Test_round_trip_Key()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalKey();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.KeyFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as Key, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_Key

        [Test]
        public void Test_round_trip_LangStringNameType()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringNameType();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.LangStringNameTypeFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as LangStringNameType, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_LangStringNameType

        [Test]
        public void Test_round_trip_LangStringTextType()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringTextType();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.LangStringTextTypeFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as LangStringTextType, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_LangStringTextType

        [Test]
        public void Test_round_trip_EmbeddedDataSpecification()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEmbeddedDataSpecification();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.EmbeddedDataSpecificationFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as EmbeddedDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_EmbeddedDataSpecification

        [Test]
        public void Test_round_trip_LevelType()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLevelType();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.LevelTypeFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as LevelType, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_LevelType

        [Test]
        public void Test_round_trip_ValueReferencePair()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalValueReferencePair();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ValueReferencePairFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as ValueReferencePair, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_ValueReferencePair

        [Test]
        public void Test_round_trip_ValueList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalValueList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.ValueListFrom(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as ValueList, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_ValueList

        [Test]
        public void Test_round_trip_LangStringPreferredNameTypeIec61360()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringPreferredNameTypeIec61360();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.LangStringPreferredNameTypeIec61360From(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as LangStringPreferredNameTypeIec61360, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_LangStringPreferredNameTypeIec61360

        [Test]
        public void Test_round_trip_LangStringShortNameTypeIec61360()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringShortNameTypeIec61360();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.LangStringShortNameTypeIec61360From(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as LangStringShortNameTypeIec61360, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_LangStringShortNameTypeIec61360

        [Test]
        public void Test_round_trip_LangStringDefinitionTypeIec61360()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringDefinitionTypeIec61360();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.LangStringDefinitionTypeIec61360From(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as LangStringDefinitionTypeIec61360, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_LangStringDefinitionTypeIec61360

        [Test]
        public void Test_round_trip_DataSpecificationIec61360()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);
    
            var anotherInstance = Aas.Jsonization.Deserialize.DataSpecificationIec61360From(
                jsonObject);
    
            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);

            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we de/serialize the complete instance " +
                    "as DataSpecificationIec61360, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // public void Test_round_trip_DataSpecificationIec61360
    }  // class TestJsonizationOfConcreteClassesOutsideContainer
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
