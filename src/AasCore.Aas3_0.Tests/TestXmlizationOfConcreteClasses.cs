/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed
using Directory = System.IO.Directory;
using Path = System.IO.Path;

using NUnit.Framework; // can't alias
using System.Collections.Generic;  // can't alias
using System.Linq;  // can't alias
using System.Xml.Linq; // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestXmlizationOfConcreteClasses
    {
        private static void CheckElementsEqual(
            XElement expected,
            XElement got,
            out Reporting.Error? error)
        {
            error = null;

            if (expected.Name.LocalName != got.Name.LocalName)
            {
                error = new Reporting.Error(
                    "Mismatch in element names: " +
                    $"{expected} != {got}"
                );
                return;
            }

            string? expectedContent = (expected.FirstNode as XText)?.Value;
            string? gotContent = (got.FirstNode as XText)?.Value;

            if (expectedContent != gotContent)
            {
                error = new Reporting.Error(
                    $"Mismatch in element contents: {expected} != {got}"
                );
                return;
            }

            var expectedChildren = expected.Elements().ToList();
            var gotChildren = got.Elements().ToList();

            if (expectedChildren.Count != gotChildren.Count)
            {
                error = new Reporting.Error(
                    $"Mismatch in child elements: {expected} != {got}"
                );
                return;
            }

            for (int i = 0; i < expectedChildren.Count; i++)
            {
                CheckElementsEqual(
                    expectedChildren[i],
                    gotChildren[i],
                    out error);

                if (error != null)
                {
                    error.PrependSegment(
                        new Reporting.IndexSegment(i));

                    error.PrependSegment(
                        new Reporting.NameSegment(
                            expected.Name.ToString()));
                }
            }
        }

        private static void AssertSerializeDeserializeEqualsOriginal(
            Aas.IClass instance, string path)
        {
            // Serialize
            var outputBuilder = new System.Text.StringBuilder();

            {
                using var writer = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    }
                );
                Aas.Xmlization.Serialize.To(
                    instance,
                    writer);
            }

            string outputText = outputBuilder.ToString();

            // Compare input == output
            {
                using var outputReader = new System.IO.StringReader(outputText);
                var gotDoc = XDocument.Load(outputReader);

                Assert.AreEqual(
                    gotDoc.Root?.Name.Namespace.ToString(),
                    "https://admin-shell.io/aas/3/0");

                foreach (var child in gotDoc.Descendants())
                {
                    Assert.AreEqual(
                        child.GetDefaultNamespace().NamespaceName,
                        "https://admin-shell.io/aas/3/0");
                }

                var expectedDoc = XDocument.Load(path);

                CheckElementsEqual(
                    expectedDoc.Root!,
                    gotDoc.Root!,
                    out Reporting.Error? inequalityError);

                if (inequalityError != null)
                {
                    Assert.Fail(
                        $"The original XML from {path} is unequal the serialized XML: " +
                        $"#/{Reporting.GenerateRelativeXPath(inequalityError.PathSegments)}: " +
                        inequalityError.Cause
                    );
                }
            }
        }

        private static readonly List<string> CausesForDeserializationFailure = (
            new List<string>()
            {
                "TypeViolation",
                "RequiredViolation",
                "EnumViolation",
                "UnexpectedAdditionalProperty"
            });

        private static void AssertEqualsExpectedOrRerecordDeserializationException(
            Aas.Xmlization.Exception? exception,
            string path)
        {
            if (exception == null)
            {
                Assert.Fail(
                    $"Expected a Xmlization exception when de-serializing {path}, but got none."
                );
            }
            else
            {
                string exceptionPath = path + ".exception";
                string got = exception.Message;
                if (Aas.Tests.Common.RecordMode)
                {
                    System.IO.File.WriteAllText(exceptionPath, got);
                }
                else
                {
                    if (!System.IO.File.Exists(exceptionPath))
                    {
                        throw new System.IO.FileNotFoundException(
                            $"The file with the recorded exception does not exist: {exceptionPath}");
                    }

                    string expected = System.IO.File.ReadAllText(exceptionPath);
                    Assert.AreEqual(
                        expected.Replace("\r\n", "\n"),
                        got.Replace("\r\n", "\n"),
                        $"The expected exception does not match the actual one for the file {path}");
                }
            }
        }

        [Test]
        public void Test_Extension_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "extension"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Extension_ok

        [Test]
        public void Test_Extension_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "extension");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Extension for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Extension_deserialization_fail

        [Test]
        public void Test_Extension_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "extension"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Extension for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Extension_verification_fail

        [Test]
        public void Test_AdministrativeInformation_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "administrativeInformation"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_AdministrativeInformation_ok

        [Test]
        public void Test_AdministrativeInformation_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "administrativeInformation");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AdministrativeInformation for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AdministrativeInformation_deserialization_fail

        [Test]
        public void Test_AdministrativeInformation_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "administrativeInformation"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AdministrativeInformation for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AdministrativeInformation_verification_fail

        [Test]
        public void Test_Qualifier_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "qualifier"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Qualifier_ok

        [Test]
        public void Test_Qualifier_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "qualifier");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Qualifier for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Qualifier_deserialization_fail

        [Test]
        public void Test_Qualifier_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "qualifier"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Qualifier for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Qualifier_verification_fail

        [Test]
        public void Test_AssetAdministrationShell_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "assetAdministrationShell"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_AssetAdministrationShell_ok

        [Test]
        public void Test_AssetAdministrationShell_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "assetAdministrationShell");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetAdministrationShell for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AssetAdministrationShell_deserialization_fail

        [Test]
        public void Test_AssetAdministrationShell_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "assetAdministrationShell"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetAdministrationShell for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AssetAdministrationShell_verification_fail

        [Test]
        public void Test_AssetInformation_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "assetInformation"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_AssetInformation_ok

        [Test]
        public void Test_AssetInformation_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "assetInformation");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetInformation for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AssetInformation_deserialization_fail

        [Test]
        public void Test_AssetInformation_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "assetInformation"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AssetInformation for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AssetInformation_verification_fail

        [Test]
        public void Test_Resource_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "resource"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Resource_ok

        [Test]
        public void Test_Resource_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "resource");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Resource for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Resource_deserialization_fail

        [Test]
        public void Test_Resource_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "resource"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Resource for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Resource_verification_fail

        [Test]
        public void Test_SpecificAssetId_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "specificAssetId"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_SpecificAssetId_ok

        [Test]
        public void Test_SpecificAssetId_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "specificAssetId");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of SpecificAssetId for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_SpecificAssetId_deserialization_fail

        [Test]
        public void Test_SpecificAssetId_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "specificAssetId"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of SpecificAssetId for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_SpecificAssetId_verification_fail

        [Test]
        public void Test_Submodel_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "submodel"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Submodel_ok

        [Test]
        public void Test_Submodel_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "submodel");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Submodel for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Submodel_deserialization_fail

        [Test]
        public void Test_Submodel_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "submodel"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Submodel for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Submodel_verification_fail

        [Test]
        public void Test_RelationshipElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "relationshipElement"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_RelationshipElement_ok

        [Test]
        public void Test_RelationshipElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "relationshipElement");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of RelationshipElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_RelationshipElement_deserialization_fail

        [Test]
        public void Test_RelationshipElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "relationshipElement"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of RelationshipElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_RelationshipElement_verification_fail

        [Test]
        public void Test_SubmodelElementList_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "submodelElementList"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_SubmodelElementList_ok

        [Test]
        public void Test_SubmodelElementList_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "submodelElementList");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementList for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_SubmodelElementList_deserialization_fail

        [Test]
        public void Test_SubmodelElementList_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "submodelElementList"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementList for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_SubmodelElementList_verification_fail

        [Test]
        public void Test_SubmodelElementCollection_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "submodelElementCollection"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_SubmodelElementCollection_ok

        [Test]
        public void Test_SubmodelElementCollection_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "submodelElementCollection");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementCollection for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_SubmodelElementCollection_deserialization_fail

        [Test]
        public void Test_SubmodelElementCollection_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "submodelElementCollection"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of SubmodelElementCollection for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_SubmodelElementCollection_verification_fail

        [Test]
        public void Test_Property_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "property"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Property_ok

        [Test]
        public void Test_Property_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "property");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Property for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Property_deserialization_fail

        [Test]
        public void Test_Property_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "property"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Property for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Property_verification_fail

        [Test]
        public void Test_MultiLanguageProperty_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "multiLanguageProperty"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_MultiLanguageProperty_ok

        [Test]
        public void Test_MultiLanguageProperty_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "multiLanguageProperty");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of MultiLanguageProperty for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_MultiLanguageProperty_deserialization_fail

        [Test]
        public void Test_MultiLanguageProperty_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "multiLanguageProperty"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of MultiLanguageProperty for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_MultiLanguageProperty_verification_fail

        [Test]
        public void Test_Range_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "range"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Range_ok

        [Test]
        public void Test_Range_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "range");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Range for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Range_deserialization_fail

        [Test]
        public void Test_Range_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "range"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Range for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Range_verification_fail

        [Test]
        public void Test_ReferenceElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "referenceElement"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_ReferenceElement_ok

        [Test]
        public void Test_ReferenceElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "referenceElement");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ReferenceElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ReferenceElement_deserialization_fail

        [Test]
        public void Test_ReferenceElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "referenceElement"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ReferenceElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ReferenceElement_verification_fail

        [Test]
        public void Test_Blob_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "blob"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Blob_ok

        [Test]
        public void Test_Blob_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "blob");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Blob for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Blob_deserialization_fail

        [Test]
        public void Test_Blob_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "blob"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Blob for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Blob_verification_fail

        [Test]
        public void Test_File_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "file"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_File_ok

        [Test]
        public void Test_File_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "file");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of File for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_File_deserialization_fail

        [Test]
        public void Test_File_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "file"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of File for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_File_verification_fail

        [Test]
        public void Test_AnnotatedRelationshipElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "annotatedRelationshipElement"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_AnnotatedRelationshipElement_ok

        [Test]
        public void Test_AnnotatedRelationshipElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "annotatedRelationshipElement");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AnnotatedRelationshipElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_AnnotatedRelationshipElement_deserialization_fail

        [Test]
        public void Test_AnnotatedRelationshipElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "annotatedRelationshipElement"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of AnnotatedRelationshipElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_AnnotatedRelationshipElement_verification_fail

        [Test]
        public void Test_Entity_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "entity"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Entity_ok

        [Test]
        public void Test_Entity_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "entity");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Entity for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Entity_deserialization_fail

        [Test]
        public void Test_Entity_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "entity"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Entity for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Entity_verification_fail

        [Test]
        public void Test_EventPayload_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "SelfContained",
                    "Expected",
                    "eventPayload"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var instance = Aas.Xmlization.Deserialize.EventPayloadFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(instance).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    instance, path);
            }
        }  // public void Test_EventPayload_ok

        [Test]
        public void Test_EventPayload_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "SelfContained",
                    "Unexpected",
                    cause,
                    "eventPayload"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of EventPayload for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EventPayloadFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_EventPayload_deserialization_fail

        [Test]
        public void Test_EventPayload_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "SelfContained",
                    "Unexpected",
                    cause,
                    "eventPayload"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of EventPayload for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var instance = Aas.Xmlization.Deserialize.EventPayloadFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(instance).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_EventPayload_verification_fail

        [Test]
        public void Test_BasicEventElement_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "basicEventElement"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_BasicEventElement_ok

        [Test]
        public void Test_BasicEventElement_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "basicEventElement");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of BasicEventElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_BasicEventElement_deserialization_fail

        [Test]
        public void Test_BasicEventElement_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "basicEventElement"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of BasicEventElement for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_BasicEventElement_verification_fail

        [Test]
        public void Test_Operation_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "operation"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Operation_ok

        [Test]
        public void Test_Operation_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "operation");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Operation for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Operation_deserialization_fail

        [Test]
        public void Test_Operation_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "operation"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Operation for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Operation_verification_fail

        [Test]
        public void Test_OperationVariable_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "operationVariable"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_OperationVariable_ok

        [Test]
        public void Test_OperationVariable_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "operationVariable");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of OperationVariable for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_OperationVariable_deserialization_fail

        [Test]
        public void Test_OperationVariable_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "operationVariable"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of OperationVariable for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_OperationVariable_verification_fail

        [Test]
        public void Test_Capability_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "capability"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Capability_ok

        [Test]
        public void Test_Capability_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "capability");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Capability for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Capability_deserialization_fail

        [Test]
        public void Test_Capability_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "capability"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Capability for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Capability_verification_fail

        [Test]
        public void Test_ConceptDescription_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "conceptDescription"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_ConceptDescription_ok

        [Test]
        public void Test_ConceptDescription_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "conceptDescription");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ConceptDescription for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ConceptDescription_deserialization_fail

        [Test]
        public void Test_ConceptDescription_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "conceptDescription"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ConceptDescription for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ConceptDescription_verification_fail

        [Test]
        public void Test_Reference_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "reference"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Reference_ok

        [Test]
        public void Test_Reference_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "reference");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Reference for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Reference_deserialization_fail

        [Test]
        public void Test_Reference_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "reference"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Reference for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Reference_verification_fail

        [Test]
        public void Test_Key_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "key"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_Key_ok

        [Test]
        public void Test_Key_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "key");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Key for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Key_deserialization_fail

        [Test]
        public void Test_Key_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "key"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Key for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Key_verification_fail

        [Test]
        public void Test_LangStringNameType_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "langStringNameType"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_LangStringNameType_ok

        [Test]
        public void Test_LangStringNameType_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringNameType");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringNameType for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringNameType_deserialization_fail

        [Test]
        public void Test_LangStringNameType_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringNameType"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringNameType for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringNameType_verification_fail

        [Test]
        public void Test_LangStringTextType_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "langStringTextType"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_LangStringTextType_ok

        [Test]
        public void Test_LangStringTextType_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringTextType");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringTextType for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringTextType_deserialization_fail

        [Test]
        public void Test_LangStringTextType_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringTextType"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringTextType for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringTextType_verification_fail

        [Test]
        public void Test_Environment_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "SelfContained",
                    "Expected",
                    "environment"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var instance = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(instance).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    instance, path);
            }
        }  // public void Test_Environment_ok

        [Test]
        public void Test_Environment_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "SelfContained",
                    "Unexpected",
                    cause,
                    "environment"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Environment for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_Environment_deserialization_fail

        [Test]
        public void Test_Environment_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "SelfContained",
                    "Unexpected",
                    cause,
                    "environment"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of Environment for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var instance = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(instance).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_Environment_verification_fail

        [Test]
        public void Test_EmbeddedDataSpecification_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "embeddedDataSpecification"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_EmbeddedDataSpecification_ok

        [Test]
        public void Test_EmbeddedDataSpecification_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "embeddedDataSpecification");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of EmbeddedDataSpecification for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_EmbeddedDataSpecification_deserialization_fail

        [Test]
        public void Test_EmbeddedDataSpecification_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "embeddedDataSpecification"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of EmbeddedDataSpecification for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_EmbeddedDataSpecification_verification_fail

        [Test]
        public void Test_LevelType_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "levelType"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_LevelType_ok

        [Test]
        public void Test_LevelType_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "levelType");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LevelType for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LevelType_deserialization_fail

        [Test]
        public void Test_LevelType_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "levelType"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LevelType for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LevelType_verification_fail

        [Test]
        public void Test_ValueReferencePair_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "valueReferencePair"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_ValueReferencePair_ok

        [Test]
        public void Test_ValueReferencePair_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "valueReferencePair");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueReferencePair for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ValueReferencePair_deserialization_fail

        [Test]
        public void Test_ValueReferencePair_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "valueReferencePair"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueReferencePair for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ValueReferencePair_verification_fail

        [Test]
        public void Test_ValueList_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "valueList"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_ValueList_ok

        [Test]
        public void Test_ValueList_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "valueList");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueList for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_ValueList_deserialization_fail

        [Test]
        public void Test_ValueList_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "valueList"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of ValueList for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_ValueList_verification_fail

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "langStringPreferredNameTypeIec61360"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_ok

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringPreferredNameTypeIec61360");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringPreferredNameTypeIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_deserialization_fail

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringPreferredNameTypeIec61360"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringPreferredNameTypeIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringPreferredNameTypeIec61360_verification_fail

        [Test]
        public void Test_LangStringShortNameTypeIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "langStringShortNameTypeIec61360"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_LangStringShortNameTypeIec61360_ok

        [Test]
        public void Test_LangStringShortNameTypeIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringShortNameTypeIec61360");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringShortNameTypeIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringShortNameTypeIec61360_deserialization_fail

        [Test]
        public void Test_LangStringShortNameTypeIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringShortNameTypeIec61360"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringShortNameTypeIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringShortNameTypeIec61360_verification_fail

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "langStringDefinitionTypeIec61360"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_ok

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringDefinitionTypeIec61360");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringDefinitionTypeIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_deserialization_fail

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "langStringDefinitionTypeIec61360"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of LangStringDefinitionTypeIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_LangStringDefinitionTypeIec61360_verification_fail

        [Test]
        public void Test_DataSpecificationIec61360_ok()
        {
            var paths = Directory.GetFiles(
                Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Expected",
                    "dataSpecificationIec61360"
                ),
                "*.xml",
                System.IO.SearchOption.AllDirectories).ToList();
            paths.Sort();

            foreach (var path in paths)
            {
                using var xmlReader = System.Xml.XmlReader.Create(path);

                var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                    xmlReader);

                var errors = Aas.Verification.Verify(container).ToList();
                Aas.Tests.Common.AssertNoVerificationErrors(errors, path);

                AssertSerializeDeserializeEqualsOriginal(
                    container, path);
            }
        }  // public void Test_DataSpecificationIec61360_ok

        [Test]
        public void Test_DataSpecificationIec61360_deserialization_fail()
        {
            foreach (string cause in CausesForDeserializationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "dataSpecificationIec61360");

                if (!Directory.Exists(baseDir))
                {
                    // No examples of DataSpecificationIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    Aas.Xmlization.Exception? exception = null;

                    try
                    {
                        _ = Aas.Xmlization.Deserialize.EnvironmentFrom(
                            xmlReader);
                    }
                    catch (Aas.Xmlization.Exception observedException)
                    {
                        exception = observedException;
                    }

                    AssertEqualsExpectedOrRerecordDeserializationException(
                        exception, path);
                }
            }
        }  // public void Test_DataSpecificationIec61360_deserialization_fail

        [Test]
        public void Test_DataSpecificationIec61360_verification_fail()
        {
            foreach (string cause in Aas.Tests.Common.CausesForVerificationFailure)
            {
                string baseDir = Path.Combine(
                    Aas.Tests.Common.TestDataDir,
                    "Xml",
                    "ContainedInEnvironment",
                    "Unexpected",
                    cause,
                    "dataSpecificationIec61360"
                );

                if (!Directory.Exists(baseDir))
                {
                    // No examples of DataSpecificationIec61360 for the failure cause.
                    continue;
                }

                var paths = Directory.GetFiles(
                    baseDir,
                    "*.xml",
                    System.IO.SearchOption.AllDirectories).ToList();
                paths.Sort();

                foreach (var path in paths)
                {
                    using var xmlReader = System.Xml.XmlReader.Create(path);

                    var container = Aas.Xmlization.Deserialize.EnvironmentFrom(
                        xmlReader);

                    var errors = Aas.Verification.Verify(container).ToList();
                    Aas.Tests.Common.AssertEqualsExpectedOrRerecordVerificationErrors(
                        errors, path);
                }
            }
        }  // public void Test_DataSpecificationIec61360_verification_fail
    }  // class TestXmlizationOfConcreteClasses
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
