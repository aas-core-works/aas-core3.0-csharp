/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

using NUnit.Framework; // can't alias

namespace AasCore.Aas3_0.Tests
{
    /// <summary>
    /// Test de/serialization of classes contained in a container <i>outside</i>
    /// of that container.
    /// </summary>
    /// <remarks>
    /// This is necessary so that we also test the methods that directly de/serialize
    /// an instance in rare use cases where it does not reside within a container such
    /// as <see cref="Aas.Environment" />.
    /// </remarks>
    public class TestXmlizationOfConcreteClassesOutsideContainer
    {
        [Test]
        public void Test_round_trip_Extension()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalExtension();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ExtensionFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Extension

        [Test]
        public void Test_round_trip_AdministrativeInformation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAdministrativeInformation();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AdministrativeInformationFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AdministrativeInformation

        [Test]
        public void Test_round_trip_Qualifier()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalQualifier();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.QualifierFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Qualifier

        [Test]
        public void Test_round_trip_AssetAdministrationShell()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AssetAdministrationShellFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AssetAdministrationShell

        [Test]
        public void Test_round_trip_AssetInformation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetInformation();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AssetInformationFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AssetInformation

        [Test]
        public void Test_round_trip_Resource()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalResource();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ResourceFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Resource

        [Test]
        public void Test_round_trip_SpecificAssetId()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSpecificAssetId();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SpecificAssetIdFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_SpecificAssetId

        [Test]
        public void Test_round_trip_Submodel()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SubmodelFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Submodel

        [Test]
        public void Test_round_trip_RelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.RelationshipElementFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_RelationshipElement

        [Test]
        public void Test_round_trip_SubmodelElementList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SubmodelElementListFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_SubmodelElementList

        [Test]
        public void Test_round_trip_SubmodelElementCollection()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.SubmodelElementCollectionFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_SubmodelElementCollection

        [Test]
        public void Test_round_trip_Property()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.PropertyFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Property

        [Test]
        public void Test_round_trip_MultiLanguageProperty()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.MultiLanguagePropertyFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_MultiLanguageProperty

        [Test]
        public void Test_round_trip_Range()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.RangeFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Range

        [Test]
        public void Test_round_trip_ReferenceElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ReferenceElementFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_ReferenceElement

        [Test]
        public void Test_round_trip_Blob()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.BlobFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Blob

        [Test]
        public void Test_round_trip_File()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.FileFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_File

        [Test]
        public void Test_round_trip_AnnotatedRelationshipElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.AnnotatedRelationshipElementFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_Entity()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.EntityFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Entity

        [Test]
        public void Test_round_trip_BasicEventElement()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.BasicEventElementFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_BasicEventElement

        [Test]
        public void Test_round_trip_Operation()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.OperationFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Operation

        [Test]
        public void Test_round_trip_OperationVariable()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperationVariable();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.OperationVariableFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_OperationVariable

        [Test]
        public void Test_round_trip_Capability()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.CapabilityFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Capability

        [Test]
        public void Test_round_trip_ConceptDescription()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalConceptDescription();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ConceptDescriptionFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_ConceptDescription

        [Test]
        public void Test_round_trip_Reference()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReference();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ReferenceFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Reference

        [Test]
        public void Test_round_trip_Key()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalKey();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.KeyFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_Key

        [Test]
        public void Test_round_trip_LangStringNameType()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringNameType();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringNameTypeFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangStringNameType

        [Test]
        public void Test_round_trip_LangStringTextType()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringTextType();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringTextTypeFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangStringTextType

        [Test]
        public void Test_round_trip_EmbeddedDataSpecification()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEmbeddedDataSpecification();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.EmbeddedDataSpecificationFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_EmbeddedDataSpecification

        [Test]
        public void Test_round_trip_LevelType()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLevelType();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LevelTypeFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LevelType

        [Test]
        public void Test_round_trip_ValueReferencePair()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalValueReferencePair();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ValueReferencePairFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_ValueReferencePair

        [Test]
        public void Test_round_trip_ValueList()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalValueList();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.ValueListFrom(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_ValueList

        [Test]
        public void Test_round_trip_LangStringPreferredNameTypeIec61360()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringPreferredNameTypeIec61360();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringPreferredNameTypeIec61360From(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangStringPreferredNameTypeIec61360

        [Test]
        public void Test_round_trip_LangStringShortNameTypeIec61360()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringShortNameTypeIec61360();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringShortNameTypeIec61360From(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangStringShortNameTypeIec61360

        [Test]
        public void Test_round_trip_LangStringDefinitionTypeIec61360()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalLangStringDefinitionTypeIec61360();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.LangStringDefinitionTypeIec61360From(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_LangStringDefinitionTypeIec61360

        [Test]
        public void Test_round_trip_DataSpecificationIec61360()
        {
            // We load from JSON here just to jump-start the round trip.
            // The round-trip goes then over XML.
            var instance = Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360();

            // The round-trip starts here.
            var outputBuilder = new System.Text.StringBuilder();

            // Serialize to XML
            {
                using var xmlWriter = System.Xml.XmlWriter.Create(
                    outputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    instance,
                    xmlWriter);
            }

            // De-serialize from XML
            string outputText = outputBuilder.ToString();

            using var outputReader = new System.IO.StringReader(outputText);

            using var xmlReader = System.Xml.XmlReader.Create(
                outputReader,
                new System.Xml.XmlReaderSettings());

            var anotherInstance = Aas.Xmlization.Deserialize.DataSpecificationIec61360From(
                xmlReader);

            // Serialize back to XML
            var anotherOutputBuilder = new System.Text.StringBuilder();

            {
                using var anotherXmlWriter = System.Xml.XmlWriter.Create(
                    anotherOutputBuilder,
                    new System.Xml.XmlWriterSettings()
                    {
                        Encoding = System.Text.Encoding.UTF8,
                        OmitXmlDeclaration = true
                    });

                Aas.Xmlization.Serialize.To(
                    anotherInstance,
                    anotherXmlWriter);
            }

            // Compare
            Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
        }  // public void Test_round_trip_DataSpecificationIec61360
    }  // class TestXmlizationOfConcreteClassesOutsideContainer
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
