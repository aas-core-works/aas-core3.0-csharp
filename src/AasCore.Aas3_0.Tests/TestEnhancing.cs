/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0; // renamed
using AasEnhancing = AasCore.Aas3_0.Enhancing; // renamed

using System.Collections.Generic; // can't alias
using System.Linq; // can't alias

using NUnit.Framework; // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestEnhancing
        {
        class Enhancement
        {
            public readonly long SomeCustomId;

            public Enhancement(long someCustomId)
            {
                SomeCustomId = someCustomId;
            }
        }

        private static AasEnhancing.Enhancer<Enhancement> CreateEnhancer()
        {
            long lastCustomId = 0;

            var enhancementFactory = new System.Func<IClass, Enhancement>(
                delegate
                {
                    lastCustomId++;
                    return new Enhancement(lastCustomId);
                }
            );

            return new AasEnhancing.Enhancer<Enhancement>(enhancementFactory);
        }

        [Test]
        public void Test_Extension()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalExtension()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Extension

        [Test]
        public void Test_AdministrativeInformation()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAdministrativeInformation()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_AdministrativeInformation

        [Test]
        public void Test_Qualifier()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalQualifier()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Qualifier

        [Test]
        public void Test_AssetAdministrationShell()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_AssetAdministrationShell

        [Test]
        public void Test_AssetInformation()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetInformation()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_AssetInformation

        [Test]
        public void Test_Resource()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalResource()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Resource

        [Test]
        public void Test_SpecificAssetId()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSpecificAssetId()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_SpecificAssetId

        [Test]
        public void Test_Submodel()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Submodel

        [Test]
        public void Test_RelationshipElement()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_RelationshipElement

        [Test]
        public void Test_SubmodelElementList()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_SubmodelElementList

        [Test]
        public void Test_SubmodelElementCollection()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_SubmodelElementCollection

        [Test]
        public void Test_Property()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Property

        [Test]
        public void Test_MultiLanguageProperty()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_MultiLanguageProperty

        [Test]
        public void Test_Range()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Range

        [Test]
        public void Test_ReferenceElement()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_ReferenceElement

        [Test]
        public void Test_Blob()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Blob

        [Test]
        public void Test_File()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_File

        [Test]
        public void Test_AnnotatedRelationshipElement()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_AnnotatedRelationshipElement

        [Test]
        public void Test_Entity()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Entity

        [Test]
        public void Test_EventPayload()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEventPayload()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_EventPayload

        [Test]
        public void Test_BasicEventElement()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_BasicEventElement

        [Test]
        public void Test_Operation()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Operation

        [Test]
        public void Test_OperationVariable()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperationVariable()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_OperationVariable

        [Test]
        public void Test_Capability()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Capability

        [Test]
        public void Test_ConceptDescription()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_ConceptDescription

        [Test]
        public void Test_Reference()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReference()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Reference

        [Test]
        public void Test_Key()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalKey()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Key

        [Test]
        public void Test_LangStringNameType()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringNameType()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_LangStringNameType

        [Test]
        public void Test_LangStringTextType()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringTextType()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_LangStringTextType

        [Test]
        public void Test_Environment()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEnvironment()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_Environment

        [Test]
        public void Test_EmbeddedDataSpecification()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEmbeddedDataSpecification()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_EmbeddedDataSpecification

        [Test]
        public void Test_LevelType()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLevelType()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_LevelType

        [Test]
        public void Test_ValueReferencePair()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalValueReferencePair()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_ValueReferencePair

        [Test]
        public void Test_ValueList()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalValueList()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_ValueList

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringPreferredNameTypeIec61360()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_LangStringPreferredNameTypeIec61360

        [Test]
        public void Test_LangStringShortNameTypeIec61360()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringShortNameTypeIec61360()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_LangStringShortNameTypeIec61360

        [Test]
        public void Test_LangStringDefinitionTypeIec61360()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringDefinitionTypeIec61360()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_LangStringDefinitionTypeIec61360

        [Test]
        public void Test_DataSpecificationIec61360()
        {
            var instance = (
                Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360()
            );

            var enhancer = CreateEnhancer();
    
            Assert.IsNull(enhancer.Unwrap(instance));

            var wrapped = enhancer.Wrap(instance);
            Assert.IsNotNull(wrapped);

            var idSet = new HashSet<long>();

            idSet.Add(enhancer.MustUnwrap(wrapped).SomeCustomId);
            idSet.UnionWith(
                wrapped
                    .Descend()
                    .Select(
                        (descendant) =>
                            enhancer.MustUnwrap(descendant).SomeCustomId
                        )
            );

            Assert.AreEqual(1, idSet.Min());
            Assert.AreEqual(idSet.Count, idSet.Max());
        }  // public void Test_DataSpecificationIec61360
    }  // class TestEnhancing
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
