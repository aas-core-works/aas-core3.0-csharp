/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

// We need to use System.MemoryExtension.SequenceEqual.
using System;  // can't alias
using System.Collections.Generic;  // can't alias
using System.Linq;  // can't alias

using NUnit.Framework;  // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestCopying
    {
        internal class DeepEqualsier
            : Aas.Visitation.AbstractTransformerWithContext<Aas.IClass, bool>
        {
            /// <summary>Compare two byte spans for equal content.</summary>
            /// <remarks>
            /// <c>byte[]</c> implicitly converts to <c>ReadOnlySpan</c>.
            /// See: https://stackoverflow.com/a/48599119/1600678
            /// </remarks>
            private static bool ByteSpansEqual(
                System.ReadOnlySpan<byte> that,
                System.ReadOnlySpan<byte> other)
            {
                return that.SequenceEqual(other);
            }

            public override bool TransformExtension(
                Aas.IExtension that,
                Aas.IClass other)
            {
                if (!(other is Aas.Extension casted))
                {
                    return false;
                }

                return (
                    (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && that.Name == casted.Name
                    && (that.ValueType != null && casted.ValueType != null)
                        ? that.ValueType == casted.ValueType
                        : that.ValueType == null && casted.ValueType == null
                    && that.Value == casted.Value
                    && (that.RefersTo != null && casted.RefersTo != null)
                        ? that.RefersTo.Count == casted.RefersTo.Count
                            && (
                                that.RefersTo
                                    .Zip(
                                        casted.RefersTo,
                                        Transform)
                                    .All(item => item))
                        : that.RefersTo == null && casted.RefersTo == null);
            }

            public override bool TransformAdministrativeInformation(
                Aas.IAdministrativeInformation that,
                Aas.IClass other)
            {
                if (!(other is Aas.AdministrativeInformation casted))
                {
                    return false;
                }

                return (
                    (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && that.Version == casted.Version
                    && that.Revision == casted.Revision
                    && (that.Creator != null && casted.Creator != null)
                        ? Transform(
                                that.Creator,
                                casted.Creator)
                        : that.Creator == null && casted.Creator == null
                    && that.TemplateId == casted.TemplateId);
            }

            public override bool TransformQualifier(
                Aas.IQualifier that,
                Aas.IClass other)
            {
                if (!(other is Aas.Qualifier casted))
                {
                    return false;
                }

                return (
                    (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Kind != null && casted.Kind != null)
                        ? that.Kind == casted.Kind
                        : that.Kind == null && casted.Kind == null
                    && that.Type == casted.Type
                    && that.ValueType == casted.ValueType
                    && that.Value == casted.Value
                    && (that.ValueId != null && casted.ValueId != null)
                        ? Transform(
                                that.ValueId,
                                casted.ValueId)
                        : that.ValueId == null && casted.ValueId == null);
            }

            public override bool TransformAssetAdministrationShell(
                Aas.IAssetAdministrationShell that,
                Aas.IClass other)
            {
                if (!(other is Aas.AssetAdministrationShell casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.Administration != null && casted.Administration != null)
                        ? Transform(
                                that.Administration,
                                casted.Administration)
                        : that.Administration == null && casted.Administration == null
                    && that.Id == casted.Id
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.DerivedFrom != null && casted.DerivedFrom != null)
                        ? Transform(
                                that.DerivedFrom,
                                casted.DerivedFrom)
                        : that.DerivedFrom == null && casted.DerivedFrom == null
                    && Transform(
                        that.AssetInformation,
                        casted.AssetInformation)
                    && (that.Submodels != null && casted.Submodels != null)
                        ? that.Submodels.Count == casted.Submodels.Count
                            && (
                                that.Submodels
                                    .Zip(
                                        casted.Submodels,
                                        Transform)
                                    .All(item => item))
                        : that.Submodels == null && casted.Submodels == null);
            }

            public override bool TransformAssetInformation(
                Aas.IAssetInformation that,
                Aas.IClass other)
            {
                if (!(other is Aas.AssetInformation casted))
                {
                    return false;
                }

                return (
                    that.AssetKind == casted.AssetKind
                    && that.GlobalAssetId == casted.GlobalAssetId
                    && (that.SpecificAssetIds != null && casted.SpecificAssetIds != null)
                        ? that.SpecificAssetIds.Count == casted.SpecificAssetIds.Count
                            && (
                                that.SpecificAssetIds
                                    .Zip(
                                        casted.SpecificAssetIds,
                                        Transform)
                                    .All(item => item))
                        : that.SpecificAssetIds == null && casted.SpecificAssetIds == null
                    && that.AssetType == casted.AssetType
                    && (that.DefaultThumbnail != null && casted.DefaultThumbnail != null)
                        ? Transform(
                                that.DefaultThumbnail,
                                casted.DefaultThumbnail)
                        : that.DefaultThumbnail == null && casted.DefaultThumbnail == null);
            }

            public override bool TransformResource(
                Aas.IResource that,
                Aas.IClass other)
            {
                if (!(other is Aas.Resource casted))
                {
                    return false;
                }

                return (
                    that.Path == casted.Path
                    && that.ContentType == casted.ContentType);
            }

            public override bool TransformSpecificAssetId(
                Aas.ISpecificAssetId that,
                Aas.IClass other)
            {
                if (!(other is Aas.SpecificAssetId casted))
                {
                    return false;
                }

                return (
                    (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && that.Name == casted.Name
                    && that.Value == casted.Value
                    && (that.ExternalSubjectId != null && casted.ExternalSubjectId != null)
                        ? Transform(
                                that.ExternalSubjectId,
                                casted.ExternalSubjectId)
                        : that.ExternalSubjectId == null && casted.ExternalSubjectId == null);
            }

            public override bool TransformSubmodel(
                Aas.ISubmodel that,
                Aas.IClass other)
            {
                if (!(other is Aas.Submodel casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.Administration != null && casted.Administration != null)
                        ? Transform(
                                that.Administration,
                                casted.Administration)
                        : that.Administration == null && casted.Administration == null
                    && that.Id == casted.Id
                    && (that.Kind != null && casted.Kind != null)
                        ? that.Kind == casted.Kind
                        : that.Kind == null && casted.Kind == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.SubmodelElements != null && casted.SubmodelElements != null)
                        ? that.SubmodelElements.Count == casted.SubmodelElements.Count
                            && (
                                that.SubmodelElements
                                    .Zip(
                                        casted.SubmodelElements,
                                        Transform)
                                    .All(item => item))
                        : that.SubmodelElements == null && casted.SubmodelElements == null);
            }

            public override bool TransformRelationshipElement(
                Aas.IRelationshipElement that,
                Aas.IClass other)
            {
                if (!(other is Aas.RelationshipElement casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && Transform(
                        that.First,
                        casted.First)
                    && Transform(
                        that.Second,
                        casted.Second));
            }

            public override bool TransformSubmodelElementList(
                Aas.ISubmodelElementList that,
                Aas.IClass other)
            {
                if (!(other is Aas.SubmodelElementList casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && that.OrderRelevant == casted.OrderRelevant
                    && (that.SemanticIdListElement != null && casted.SemanticIdListElement != null)
                        ? Transform(
                                that.SemanticIdListElement,
                                casted.SemanticIdListElement)
                        : that.SemanticIdListElement == null && casted.SemanticIdListElement == null
                    && that.TypeValueListElement == casted.TypeValueListElement
                    && (that.ValueTypeListElement != null && casted.ValueTypeListElement != null)
                        ? that.ValueTypeListElement == casted.ValueTypeListElement
                        : that.ValueTypeListElement == null && casted.ValueTypeListElement == null
                    && (that.Value != null && casted.Value != null)
                        ? that.Value.Count == casted.Value.Count
                            && (
                                that.Value
                                    .Zip(
                                        casted.Value,
                                        Transform)
                                    .All(item => item))
                        : that.Value == null && casted.Value == null);
            }

            public override bool TransformSubmodelElementCollection(
                Aas.ISubmodelElementCollection that,
                Aas.IClass other)
            {
                if (!(other is Aas.SubmodelElementCollection casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.Value != null && casted.Value != null)
                        ? that.Value.Count == casted.Value.Count
                            && (
                                that.Value
                                    .Zip(
                                        casted.Value,
                                        Transform)
                                    .All(item => item))
                        : that.Value == null && casted.Value == null);
            }

            public override bool TransformProperty(
                Aas.IProperty that,
                Aas.IClass other)
            {
                if (!(other is Aas.Property casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && that.ValueType == casted.ValueType
                    && that.Value == casted.Value
                    && (that.ValueId != null && casted.ValueId != null)
                        ? Transform(
                                that.ValueId,
                                casted.ValueId)
                        : that.ValueId == null && casted.ValueId == null);
            }

            public override bool TransformMultiLanguageProperty(
                Aas.IMultiLanguageProperty that,
                Aas.IClass other)
            {
                if (!(other is Aas.MultiLanguageProperty casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.Value != null && casted.Value != null)
                        ? that.Value.Count == casted.Value.Count
                            && (
                                that.Value
                                    .Zip(
                                        casted.Value,
                                        Transform)
                                    .All(item => item))
                        : that.Value == null && casted.Value == null
                    && (that.ValueId != null && casted.ValueId != null)
                        ? Transform(
                                that.ValueId,
                                casted.ValueId)
                        : that.ValueId == null && casted.ValueId == null);
            }

            public override bool TransformRange(
                Aas.IRange that,
                Aas.IClass other)
            {
                if (!(other is Aas.Range casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && that.ValueType == casted.ValueType
                    && that.Min == casted.Min
                    && that.Max == casted.Max);
            }

            public override bool TransformReferenceElement(
                Aas.IReferenceElement that,
                Aas.IClass other)
            {
                if (!(other is Aas.ReferenceElement casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.Value != null && casted.Value != null)
                        ? Transform(
                                that.Value,
                                casted.Value)
                        : that.Value == null && casted.Value == null);
            }

            public override bool TransformBlob(
                Aas.IBlob that,
                Aas.IClass other)
            {
                if (!(other is Aas.Blob casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && ByteSpansEqual(
                        that.Value,
                        casted.Value)
                    && that.ContentType == casted.ContentType);
            }

            public override bool TransformFile(
                Aas.IFile that,
                Aas.IClass other)
            {
                if (!(other is Aas.File casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && that.Value == casted.Value
                    && that.ContentType == casted.ContentType);
            }

            public override bool TransformAnnotatedRelationshipElement(
                Aas.IAnnotatedRelationshipElement that,
                Aas.IClass other)
            {
                if (!(other is Aas.AnnotatedRelationshipElement casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && Transform(
                        that.First,
                        casted.First)
                    && Transform(
                        that.Second,
                        casted.Second)
                    && (that.Annotations != null && casted.Annotations != null)
                        ? that.Annotations.Count == casted.Annotations.Count
                            && (
                                that.Annotations
                                    .Zip(
                                        casted.Annotations,
                                        Transform)
                                    .All(item => item))
                        : that.Annotations == null && casted.Annotations == null);
            }

            public override bool TransformEntity(
                Aas.IEntity that,
                Aas.IClass other)
            {
                if (!(other is Aas.Entity casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.Statements != null && casted.Statements != null)
                        ? that.Statements.Count == casted.Statements.Count
                            && (
                                that.Statements
                                    .Zip(
                                        casted.Statements,
                                        Transform)
                                    .All(item => item))
                        : that.Statements == null && casted.Statements == null
                    && that.EntityType == casted.EntityType
                    && that.GlobalAssetId == casted.GlobalAssetId
                    && (that.SpecificAssetIds != null && casted.SpecificAssetIds != null)
                        ? that.SpecificAssetIds.Count == casted.SpecificAssetIds.Count
                            && (
                                that.SpecificAssetIds
                                    .Zip(
                                        casted.SpecificAssetIds,
                                        Transform)
                                    .All(item => item))
                        : that.SpecificAssetIds == null && casted.SpecificAssetIds == null);
            }

            public override bool TransformEventPayload(
                Aas.IEventPayload that,
                Aas.IClass other)
            {
                if (!(other is Aas.EventPayload casted))
                {
                    return false;
                }

                return (
                    Transform(
                        that.Source,
                        casted.Source)
                    && (that.SourceSemanticId != null && casted.SourceSemanticId != null)
                        ? Transform(
                                that.SourceSemanticId,
                                casted.SourceSemanticId)
                        : that.SourceSemanticId == null && casted.SourceSemanticId == null
                    && Transform(
                        that.ObservableReference,
                        casted.ObservableReference)
                    && (that.ObservableSemanticId != null && casted.ObservableSemanticId != null)
                        ? Transform(
                                that.ObservableSemanticId,
                                casted.ObservableSemanticId)
                        : that.ObservableSemanticId == null && casted.ObservableSemanticId == null
                    && that.Topic == casted.Topic
                    && (that.SubjectId != null && casted.SubjectId != null)
                        ? Transform(
                                that.SubjectId,
                                casted.SubjectId)
                        : that.SubjectId == null && casted.SubjectId == null
                    && that.TimeStamp == casted.TimeStamp
                    && ByteSpansEqual(
                        that.Payload,
                        casted.Payload));
            }

            public override bool TransformBasicEventElement(
                Aas.IBasicEventElement that,
                Aas.IClass other)
            {
                if (!(other is Aas.BasicEventElement casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && Transform(
                        that.Observed,
                        casted.Observed)
                    && that.Direction == casted.Direction
                    && that.State == casted.State
                    && that.MessageTopic == casted.MessageTopic
                    && (that.MessageBroker != null && casted.MessageBroker != null)
                        ? Transform(
                                that.MessageBroker,
                                casted.MessageBroker)
                        : that.MessageBroker == null && casted.MessageBroker == null
                    && that.LastUpdate == casted.LastUpdate
                    && that.MinInterval == casted.MinInterval
                    && that.MaxInterval == casted.MaxInterval);
            }

            public override bool TransformOperation(
                Aas.IOperation that,
                Aas.IClass other)
            {
                if (!(other is Aas.Operation casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.InputVariables != null && casted.InputVariables != null)
                        ? that.InputVariables.Count == casted.InputVariables.Count
                            && (
                                that.InputVariables
                                    .Zip(
                                        casted.InputVariables,
                                        Transform)
                                    .All(item => item))
                        : that.InputVariables == null && casted.InputVariables == null
                    && (that.OutputVariables != null && casted.OutputVariables != null)
                        ? that.OutputVariables.Count == casted.OutputVariables.Count
                            && (
                                that.OutputVariables
                                    .Zip(
                                        casted.OutputVariables,
                                        Transform)
                                    .All(item => item))
                        : that.OutputVariables == null && casted.OutputVariables == null
                    && (that.InoutputVariables != null && casted.InoutputVariables != null)
                        ? that.InoutputVariables.Count == casted.InoutputVariables.Count
                            && (
                                that.InoutputVariables
                                    .Zip(
                                        casted.InoutputVariables,
                                        Transform)
                                    .All(item => item))
                        : that.InoutputVariables == null && casted.InoutputVariables == null);
            }

            public override bool TransformOperationVariable(
                Aas.IOperationVariable that,
                Aas.IClass other)
            {
                if (!(other is Aas.OperationVariable casted))
                {
                    return false;
                }

                return (
                    Transform(
                        that.Value,
                        casted.Value));
            }

            public override bool TransformCapability(
                Aas.ICapability that,
                Aas.IClass other)
            {
                if (!(other is Aas.Capability casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.SemanticId != null && casted.SemanticId != null)
                        ? Transform(
                                that.SemanticId,
                                casted.SemanticId)
                        : that.SemanticId == null && casted.SemanticId == null
                    && (that.SupplementalSemanticIds != null && casted.SupplementalSemanticIds != null)
                        ? that.SupplementalSemanticIds.Count == casted.SupplementalSemanticIds.Count
                            && (
                                that.SupplementalSemanticIds
                                    .Zip(
                                        casted.SupplementalSemanticIds,
                                        Transform)
                                    .All(item => item))
                        : that.SupplementalSemanticIds == null && casted.SupplementalSemanticIds == null
                    && (that.Qualifiers != null && casted.Qualifiers != null)
                        ? that.Qualifiers.Count == casted.Qualifiers.Count
                            && (
                                that.Qualifiers
                                    .Zip(
                                        casted.Qualifiers,
                                        Transform)
                                    .All(item => item))
                        : that.Qualifiers == null && casted.Qualifiers == null
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null);
            }

            public override bool TransformConceptDescription(
                Aas.IConceptDescription that,
                Aas.IClass other)
            {
                if (!(other is Aas.ConceptDescription casted))
                {
                    return false;
                }

                return (
                    (that.Extensions != null && casted.Extensions != null)
                        ? that.Extensions.Count == casted.Extensions.Count
                            && (
                                that.Extensions
                                    .Zip(
                                        casted.Extensions,
                                        Transform)
                                    .All(item => item))
                        : that.Extensions == null && casted.Extensions == null
                    && that.Category == casted.Category
                    && that.IdShort == casted.IdShort
                    && (that.DisplayName != null && casted.DisplayName != null)
                        ? that.DisplayName.Count == casted.DisplayName.Count
                            && (
                                that.DisplayName
                                    .Zip(
                                        casted.DisplayName,
                                        Transform)
                                    .All(item => item))
                        : that.DisplayName == null && casted.DisplayName == null
                    && (that.Description != null && casted.Description != null)
                        ? that.Description.Count == casted.Description.Count
                            && (
                                that.Description
                                    .Zip(
                                        casted.Description,
                                        Transform)
                                    .All(item => item))
                        : that.Description == null && casted.Description == null
                    && (that.Administration != null && casted.Administration != null)
                        ? Transform(
                                that.Administration,
                                casted.Administration)
                        : that.Administration == null && casted.Administration == null
                    && that.Id == casted.Id
                    && (that.EmbeddedDataSpecifications != null && casted.EmbeddedDataSpecifications != null)
                        ? that.EmbeddedDataSpecifications.Count == casted.EmbeddedDataSpecifications.Count
                            && (
                                that.EmbeddedDataSpecifications
                                    .Zip(
                                        casted.EmbeddedDataSpecifications,
                                        Transform)
                                    .All(item => item))
                        : that.EmbeddedDataSpecifications == null && casted.EmbeddedDataSpecifications == null
                    && (that.IsCaseOf != null && casted.IsCaseOf != null)
                        ? that.IsCaseOf.Count == casted.IsCaseOf.Count
                            && (
                                that.IsCaseOf
                                    .Zip(
                                        casted.IsCaseOf,
                                        Transform)
                                    .All(item => item))
                        : that.IsCaseOf == null && casted.IsCaseOf == null);
            }

            public override bool TransformReference(
                Aas.IReference that,
                Aas.IClass other)
            {
                if (!(other is Aas.Reference casted))
                {
                    return false;
                }

                return (
                    that.Type == casted.Type
                    && (that.ReferredSemanticId != null && casted.ReferredSemanticId != null)
                        ? Transform(
                                that.ReferredSemanticId,
                                casted.ReferredSemanticId)
                        : that.ReferredSemanticId == null && casted.ReferredSemanticId == null
                    && that.Keys.Count == casted.Keys.Count
                    && (
                        that.Keys
                            .Zip(
                                casted.Keys,
                                Transform)
                            .All(item => item)));
            }

            public override bool TransformKey(
                Aas.IKey that,
                Aas.IClass other)
            {
                if (!(other is Aas.Key casted))
                {
                    return false;
                }

                return (
                    that.Type == casted.Type
                    && that.Value == casted.Value);
            }

            public override bool TransformLangStringNameType(
                Aas.ILangStringNameType that,
                Aas.IClass other)
            {
                if (!(other is Aas.LangStringNameType casted))
                {
                    return false;
                }

                return (
                    that.Language == casted.Language
                    && that.Text == casted.Text);
            }

            public override bool TransformLangStringTextType(
                Aas.ILangStringTextType that,
                Aas.IClass other)
            {
                if (!(other is Aas.LangStringTextType casted))
                {
                    return false;
                }

                return (
                    that.Language == casted.Language
                    && that.Text == casted.Text);
            }

            public override bool TransformEnvironment(
                Aas.IEnvironment that,
                Aas.IClass other)
            {
                if (!(other is Aas.Environment casted))
                {
                    return false;
                }

                return (
                    (that.AssetAdministrationShells != null && casted.AssetAdministrationShells != null)
                        ? that.AssetAdministrationShells.Count == casted.AssetAdministrationShells.Count
                            && (
                                that.AssetAdministrationShells
                                    .Zip(
                                        casted.AssetAdministrationShells,
                                        Transform)
                                    .All(item => item))
                        : that.AssetAdministrationShells == null && casted.AssetAdministrationShells == null
                    && (that.Submodels != null && casted.Submodels != null)
                        ? that.Submodels.Count == casted.Submodels.Count
                            && (
                                that.Submodels
                                    .Zip(
                                        casted.Submodels,
                                        Transform)
                                    .All(item => item))
                        : that.Submodels == null && casted.Submodels == null
                    && (that.ConceptDescriptions != null && casted.ConceptDescriptions != null)
                        ? that.ConceptDescriptions.Count == casted.ConceptDescriptions.Count
                            && (
                                that.ConceptDescriptions
                                    .Zip(
                                        casted.ConceptDescriptions,
                                        Transform)
                                    .All(item => item))
                        : that.ConceptDescriptions == null && casted.ConceptDescriptions == null);
            }

            public override bool TransformEmbeddedDataSpecification(
                Aas.IEmbeddedDataSpecification that,
                Aas.IClass other)
            {
                if (!(other is Aas.EmbeddedDataSpecification casted))
                {
                    return false;
                }

                return (
                    Transform(
                        that.DataSpecification,
                        casted.DataSpecification)
                    && Transform(
                        that.DataSpecificationContent,
                        casted.DataSpecificationContent));
            }

            public override bool TransformLevelType(
                Aas.ILevelType that,
                Aas.IClass other)
            {
                if (!(other is Aas.LevelType casted))
                {
                    return false;
                }

                return (
                    that.Min == casted.Min
                    && that.Nom == casted.Nom
                    && that.Typ == casted.Typ
                    && that.Max == casted.Max);
            }

            public override bool TransformValueReferencePair(
                Aas.IValueReferencePair that,
                Aas.IClass other)
            {
                if (!(other is Aas.ValueReferencePair casted))
                {
                    return false;
                }

                return (
                    that.Value == casted.Value
                    && Transform(
                        that.ValueId,
                        casted.ValueId));
            }

            public override bool TransformValueList(
                Aas.IValueList that,
                Aas.IClass other)
            {
                if (!(other is Aas.ValueList casted))
                {
                    return false;
                }

                return (
                    that.ValueReferencePairs.Count == casted.ValueReferencePairs.Count
                    && (
                        that.ValueReferencePairs
                            .Zip(
                                casted.ValueReferencePairs,
                                Transform)
                            .All(item => item)));
            }

            public override bool TransformLangStringPreferredNameTypeIec61360(
                Aas.ILangStringPreferredNameTypeIec61360 that,
                Aas.IClass other)
            {
                if (!(other is Aas.LangStringPreferredNameTypeIec61360 casted))
                {
                    return false;
                }

                return (
                    that.Language == casted.Language
                    && that.Text == casted.Text);
            }

            public override bool TransformLangStringShortNameTypeIec61360(
                Aas.ILangStringShortNameTypeIec61360 that,
                Aas.IClass other)
            {
                if (!(other is Aas.LangStringShortNameTypeIec61360 casted))
                {
                    return false;
                }

                return (
                    that.Language == casted.Language
                    && that.Text == casted.Text);
            }

            public override bool TransformLangStringDefinitionTypeIec61360(
                Aas.ILangStringDefinitionTypeIec61360 that,
                Aas.IClass other)
            {
                if (!(other is Aas.LangStringDefinitionTypeIec61360 casted))
                {
                    return false;
                }

                return (
                    that.Language == casted.Language
                    && that.Text == casted.Text);
            }

            public override bool TransformDataSpecificationIec61360(
                Aas.IDataSpecificationIec61360 that,
                Aas.IClass other)
            {
                if (!(other is Aas.DataSpecificationIec61360 casted))
                {
                    return false;
                }

                return (
                    that.PreferredName.Count == casted.PreferredName.Count
                    && (
                        that.PreferredName
                            .Zip(
                                casted.PreferredName,
                                Transform)
                            .All(item => item))
                    && (that.ShortName != null && casted.ShortName != null)
                        ? that.ShortName.Count == casted.ShortName.Count
                            && (
                                that.ShortName
                                    .Zip(
                                        casted.ShortName,
                                        Transform)
                                    .All(item => item))
                        : that.ShortName == null && casted.ShortName == null
                    && that.Unit == casted.Unit
                    && (that.UnitId != null && casted.UnitId != null)
                        ? Transform(
                                that.UnitId,
                                casted.UnitId)
                        : that.UnitId == null && casted.UnitId == null
                    && that.SourceOfDefinition == casted.SourceOfDefinition
                    && that.Symbol == casted.Symbol
                    && (that.DataType != null && casted.DataType != null)
                        ? that.DataType == casted.DataType
                        : that.DataType == null && casted.DataType == null
                    && (that.Definition != null && casted.Definition != null)
                        ? that.Definition.Count == casted.Definition.Count
                            && (
                                that.Definition
                                    .Zip(
                                        casted.Definition,
                                        Transform)
                                    .All(item => item))
                        : that.Definition == null && casted.Definition == null
                    && that.ValueFormat == casted.ValueFormat
                    && (that.ValueList != null && casted.ValueList != null)
                        ? Transform(
                                that.ValueList,
                                casted.ValueList)
                        : that.ValueList == null && casted.ValueList == null
                    && that.Value == casted.Value
                    && (that.LevelType != null && casted.LevelType != null)
                        ? Transform(
                                that.LevelType,
                                casted.LevelType)
                        : that.LevelType == null && casted.LevelType == null);
            }
        }  // internal class DeepEqualsier

        private static readonly DeepEqualsier DeepEqualsierInstance = new DeepEqualsier();

        private static bool ExtensionShallowEquals(
            Aas.Extension that,
            Aas.Extension other)
        {
            return (
                that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Name == other.Name
                && that.ValueType == other.ValueType
                && that.Value == other.Value
                && that.RefersTo == other.RefersTo);
        }

        private static bool AdministrativeInformationShallowEquals(
            Aas.AdministrativeInformation that,
            Aas.AdministrativeInformation other)
        {
            return (
                that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Version == other.Version
                && that.Revision == other.Revision
                && that.Creator == other.Creator
                && that.TemplateId == other.TemplateId);
        }

        private static bool QualifierShallowEquals(
            Aas.Qualifier that,
            Aas.Qualifier other)
        {
            return (
                that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Kind == other.Kind
                && that.Type == other.Type
                && that.ValueType == other.ValueType
                && that.Value == other.Value
                && that.ValueId == other.ValueId);
        }

        private static bool AssetAdministrationShellShallowEquals(
            Aas.AssetAdministrationShell that,
            Aas.AssetAdministrationShell other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.Administration == other.Administration
                && that.Id == other.Id
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.DerivedFrom == other.DerivedFrom
                && that.AssetInformation == other.AssetInformation
                && that.Submodels == other.Submodels);
        }

        private static bool AssetInformationShallowEquals(
            Aas.AssetInformation that,
            Aas.AssetInformation other)
        {
            return (
                that.AssetKind == other.AssetKind
                && that.GlobalAssetId == other.GlobalAssetId
                && that.SpecificAssetIds == other.SpecificAssetIds
                && that.AssetType == other.AssetType
                && that.DefaultThumbnail == other.DefaultThumbnail);
        }

        private static bool ResourceShallowEquals(
            Aas.Resource that,
            Aas.Resource other)
        {
            return that.Path == other.Path && that.ContentType == other.ContentType;
        }

        private static bool SpecificAssetIdShallowEquals(
            Aas.SpecificAssetId that,
            Aas.SpecificAssetId other)
        {
            return (
                that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Name == other.Name
                && that.Value == other.Value
                && that.ExternalSubjectId == other.ExternalSubjectId);
        }

        private static bool SubmodelShallowEquals(
            Aas.Submodel that,
            Aas.Submodel other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.Administration == other.Administration
                && that.Id == other.Id
                && that.Kind == other.Kind
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.SubmodelElements == other.SubmodelElements);
        }

        private static bool RelationshipElementShallowEquals(
            Aas.RelationshipElement that,
            Aas.RelationshipElement other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.First == other.First
                && that.Second == other.Second);
        }

        private static bool SubmodelElementListShallowEquals(
            Aas.SubmodelElementList that,
            Aas.SubmodelElementList other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.OrderRelevant == other.OrderRelevant
                && that.SemanticIdListElement == other.SemanticIdListElement
                && that.TypeValueListElement == other.TypeValueListElement
                && that.ValueTypeListElement == other.ValueTypeListElement
                && that.Value == other.Value);
        }

        private static bool SubmodelElementCollectionShallowEquals(
            Aas.SubmodelElementCollection that,
            Aas.SubmodelElementCollection other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Value == other.Value);
        }

        private static bool PropertyShallowEquals(
            Aas.Property that,
            Aas.Property other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.ValueType == other.ValueType
                && that.Value == other.Value
                && that.ValueId == other.ValueId);
        }

        private static bool MultiLanguagePropertyShallowEquals(
            Aas.MultiLanguageProperty that,
            Aas.MultiLanguageProperty other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Value == other.Value
                && that.ValueId == other.ValueId);
        }

        private static bool RangeShallowEquals(
            Aas.Range that,
            Aas.Range other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.ValueType == other.ValueType
                && that.Min == other.Min
                && that.Max == other.Max);
        }

        private static bool ReferenceElementShallowEquals(
            Aas.ReferenceElement that,
            Aas.ReferenceElement other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Value == other.Value);
        }

        private static bool BlobShallowEquals(
            Aas.Blob that,
            Aas.Blob other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Value == other.Value
                && that.ContentType == other.ContentType);
        }

        private static bool FileShallowEquals(
            Aas.File that,
            Aas.File other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Value == other.Value
                && that.ContentType == other.ContentType);
        }

        private static bool AnnotatedRelationshipElementShallowEquals(
            Aas.AnnotatedRelationshipElement that,
            Aas.AnnotatedRelationshipElement other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.First == other.First
                && that.Second == other.Second
                && that.Annotations == other.Annotations);
        }

        private static bool EntityShallowEquals(
            Aas.Entity that,
            Aas.Entity other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Statements == other.Statements
                && that.EntityType == other.EntityType
                && that.GlobalAssetId == other.GlobalAssetId
                && that.SpecificAssetIds == other.SpecificAssetIds);
        }

        private static bool EventPayloadShallowEquals(
            Aas.EventPayload that,
            Aas.EventPayload other)
        {
            return (
                that.Source == other.Source
                && that.SourceSemanticId == other.SourceSemanticId
                && that.ObservableReference == other.ObservableReference
                && that.ObservableSemanticId == other.ObservableSemanticId
                && that.Topic == other.Topic
                && that.SubjectId == other.SubjectId
                && that.TimeStamp == other.TimeStamp
                && that.Payload == other.Payload);
        }

        private static bool BasicEventElementShallowEquals(
            Aas.BasicEventElement that,
            Aas.BasicEventElement other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.Observed == other.Observed
                && that.Direction == other.Direction
                && that.State == other.State
                && that.MessageTopic == other.MessageTopic
                && that.MessageBroker == other.MessageBroker
                && that.LastUpdate == other.LastUpdate
                && that.MinInterval == other.MinInterval
                && that.MaxInterval == other.MaxInterval);
        }

        private static bool OperationShallowEquals(
            Aas.Operation that,
            Aas.Operation other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.InputVariables == other.InputVariables
                && that.OutputVariables == other.OutputVariables
                && that.InoutputVariables == other.InoutputVariables);
        }

        private static bool OperationVariableShallowEquals(
            Aas.OperationVariable that,
            Aas.OperationVariable other)
        {
            return that.Value == other.Value;
        }

        private static bool CapabilityShallowEquals(
            Aas.Capability that,
            Aas.Capability other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.SemanticId == other.SemanticId
                && that.SupplementalSemanticIds == other.SupplementalSemanticIds
                && that.Qualifiers == other.Qualifiers
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications);
        }

        private static bool ConceptDescriptionShallowEquals(
            Aas.ConceptDescription that,
            Aas.ConceptDescription other)
        {
            return (
                that.Extensions == other.Extensions
                && that.Category == other.Category
                && that.IdShort == other.IdShort
                && that.DisplayName == other.DisplayName
                && that.Description == other.Description
                && that.Administration == other.Administration
                && that.Id == other.Id
                && that.EmbeddedDataSpecifications == other.EmbeddedDataSpecifications
                && that.IsCaseOf == other.IsCaseOf);
        }

        private static bool ReferenceShallowEquals(
            Aas.Reference that,
            Aas.Reference other)
        {
            return (
                that.Type == other.Type
                && that.ReferredSemanticId == other.ReferredSemanticId
                && that.Keys == other.Keys);
        }

        private static bool KeyShallowEquals(
            Aas.Key that,
            Aas.Key other)
        {
            return that.Type == other.Type && that.Value == other.Value;
        }

        private static bool LangStringNameTypeShallowEquals(
            Aas.LangStringNameType that,
            Aas.LangStringNameType other)
        {
            return that.Language == other.Language && that.Text == other.Text;
        }

        private static bool LangStringTextTypeShallowEquals(
            Aas.LangStringTextType that,
            Aas.LangStringTextType other)
        {
            return that.Language == other.Language && that.Text == other.Text;
        }

        private static bool EnvironmentShallowEquals(
            Aas.Environment that,
            Aas.Environment other)
        {
            return (
                that.AssetAdministrationShells == other.AssetAdministrationShells
                && that.Submodels == other.Submodels
                && that.ConceptDescriptions == other.ConceptDescriptions);
        }

        private static bool EmbeddedDataSpecificationShallowEquals(
            Aas.EmbeddedDataSpecification that,
            Aas.EmbeddedDataSpecification other)
        {
            return (
                that.DataSpecification == other.DataSpecification
                && that.DataSpecificationContent == other.DataSpecificationContent);
        }

        private static bool LevelTypeShallowEquals(
            Aas.LevelType that,
            Aas.LevelType other)
        {
            return (
                that.Min == other.Min
                && that.Nom == other.Nom
                && that.Typ == other.Typ
                && that.Max == other.Max);
        }

        private static bool ValueReferencePairShallowEquals(
            Aas.ValueReferencePair that,
            Aas.ValueReferencePair other)
        {
            return that.Value == other.Value && that.ValueId == other.ValueId;
        }

        private static bool ValueListShallowEquals(
            Aas.ValueList that,
            Aas.ValueList other)
        {
            return that.ValueReferencePairs == other.ValueReferencePairs;
        }

        private static bool LangStringPreferredNameTypeIec61360ShallowEquals(
            Aas.LangStringPreferredNameTypeIec61360 that,
            Aas.LangStringPreferredNameTypeIec61360 other)
        {
            return that.Language == other.Language && that.Text == other.Text;
        }

        private static bool LangStringShortNameTypeIec61360ShallowEquals(
            Aas.LangStringShortNameTypeIec61360 that,
            Aas.LangStringShortNameTypeIec61360 other)
        {
            return that.Language == other.Language && that.Text == other.Text;
        }

        private static bool LangStringDefinitionTypeIec61360ShallowEquals(
            Aas.LangStringDefinitionTypeIec61360 that,
            Aas.LangStringDefinitionTypeIec61360 other)
        {
            return that.Language == other.Language && that.Text == other.Text;
        }

        private static bool DataSpecificationIec61360ShallowEquals(
            Aas.DataSpecificationIec61360 that,
            Aas.DataSpecificationIec61360 other)
        {
            return (
                that.PreferredName == other.PreferredName
                && that.ShortName == other.ShortName
                && that.Unit == other.Unit
                && that.UnitId == other.UnitId
                && that.SourceOfDefinition == other.SourceOfDefinition
                && that.Symbol == other.Symbol
                && that.DataType == other.DataType
                && that.Definition == other.Definition
                && that.ValueFormat == other.ValueFormat
                && that.ValueList == other.ValueList
                && that.Value == other.Value
                && that.LevelType == other.LevelType);
        }

        private static bool ExtensionDeepEquals(
            Aas.Extension that,
            Aas.Extension other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool AdministrativeInformationDeepEquals(
            Aas.AdministrativeInformation that,
            Aas.AdministrativeInformation other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool QualifierDeepEquals(
            Aas.Qualifier that,
            Aas.Qualifier other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool AssetAdministrationShellDeepEquals(
            Aas.AssetAdministrationShell that,
            Aas.AssetAdministrationShell other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool AssetInformationDeepEquals(
            Aas.AssetInformation that,
            Aas.AssetInformation other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool ResourceDeepEquals(
            Aas.Resource that,
            Aas.Resource other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool SpecificAssetIdDeepEquals(
            Aas.SpecificAssetId that,
            Aas.SpecificAssetId other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool SubmodelDeepEquals(
            Aas.Submodel that,
            Aas.Submodel other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool RelationshipElementDeepEquals(
            Aas.RelationshipElement that,
            Aas.RelationshipElement other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool SubmodelElementListDeepEquals(
            Aas.SubmodelElementList that,
            Aas.SubmodelElementList other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool SubmodelElementCollectionDeepEquals(
            Aas.SubmodelElementCollection that,
            Aas.SubmodelElementCollection other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool PropertyDeepEquals(
            Aas.Property that,
            Aas.Property other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool MultiLanguagePropertyDeepEquals(
            Aas.MultiLanguageProperty that,
            Aas.MultiLanguageProperty other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool RangeDeepEquals(
            Aas.Range that,
            Aas.Range other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool ReferenceElementDeepEquals(
            Aas.ReferenceElement that,
            Aas.ReferenceElement other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool BlobDeepEquals(
            Aas.Blob that,
            Aas.Blob other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool FileDeepEquals(
            Aas.File that,
            Aas.File other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool AnnotatedRelationshipElementDeepEquals(
            Aas.AnnotatedRelationshipElement that,
            Aas.AnnotatedRelationshipElement other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool EntityDeepEquals(
            Aas.Entity that,
            Aas.Entity other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool EventPayloadDeepEquals(
            Aas.EventPayload that,
            Aas.EventPayload other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool BasicEventElementDeepEquals(
            Aas.BasicEventElement that,
            Aas.BasicEventElement other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool OperationDeepEquals(
            Aas.Operation that,
            Aas.Operation other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool OperationVariableDeepEquals(
            Aas.OperationVariable that,
            Aas.OperationVariable other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool CapabilityDeepEquals(
            Aas.Capability that,
            Aas.Capability other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool ConceptDescriptionDeepEquals(
            Aas.ConceptDescription that,
            Aas.ConceptDescription other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool ReferenceDeepEquals(
            Aas.Reference that,
            Aas.Reference other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool KeyDeepEquals(
            Aas.Key that,
            Aas.Key other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool LangStringNameTypeDeepEquals(
            Aas.LangStringNameType that,
            Aas.LangStringNameType other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool LangStringTextTypeDeepEquals(
            Aas.LangStringTextType that,
            Aas.LangStringTextType other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool EnvironmentDeepEquals(
            Aas.Environment that,
            Aas.Environment other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool EmbeddedDataSpecificationDeepEquals(
            Aas.EmbeddedDataSpecification that,
            Aas.EmbeddedDataSpecification other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool LevelTypeDeepEquals(
            Aas.LevelType that,
            Aas.LevelType other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool ValueReferencePairDeepEquals(
            Aas.ValueReferencePair that,
            Aas.ValueReferencePair other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool ValueListDeepEquals(
            Aas.ValueList that,
            Aas.ValueList other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool LangStringPreferredNameTypeIec61360DeepEquals(
            Aas.LangStringPreferredNameTypeIec61360 that,
            Aas.LangStringPreferredNameTypeIec61360 other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool LangStringShortNameTypeIec61360DeepEquals(
            Aas.LangStringShortNameTypeIec61360 that,
            Aas.LangStringShortNameTypeIec61360 other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool LangStringDefinitionTypeIec61360DeepEquals(
            Aas.LangStringDefinitionTypeIec61360 that,
            Aas.LangStringDefinitionTypeIec61360 other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        private static bool DataSpecificationIec61360DeepEquals(
            Aas.DataSpecificationIec61360 that,
            Aas.DataSpecificationIec61360 other)
        {
            return DeepEqualsierInstance.Transform(that, other);
        }

        [Test]
        public void Test_Extension_shallow_copy()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMaximalExtension());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ExtensionShallowEquals(
                    instance, instanceCopy),
                "Extension");
        }  // public void Test_Extension_shallow_copy

        [Test]
        public void Test_Extension_deep_copy()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMaximalExtension());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ExtensionDeepEquals(
                    instance, instanceCopy),
                "Extension");
        }  // public void Test_Extension_deep_copy

        [Test]
        public void Test_AdministrativeInformation_shallow_copy()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAdministrativeInformation());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                AdministrativeInformationShallowEquals(
                    instance, instanceCopy),
                "AdministrativeInformation");
        }  // public void Test_AdministrativeInformation_shallow_copy

        [Test]
        public void Test_AdministrativeInformation_deep_copy()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAdministrativeInformation());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                AdministrativeInformationDeepEquals(
                    instance, instanceCopy),
                "AdministrativeInformation");
        }  // public void Test_AdministrativeInformation_deep_copy

        [Test]
        public void Test_Qualifier_shallow_copy()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadMaximalQualifier());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                QualifierShallowEquals(
                    instance, instanceCopy),
                "Qualifier");
        }  // public void Test_Qualifier_shallow_copy

        [Test]
        public void Test_Qualifier_deep_copy()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadMaximalQualifier());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                QualifierDeepEquals(
                    instance, instanceCopy),
                "Qualifier");
        }  // public void Test_Qualifier_deep_copy

        [Test]
        public void Test_AssetAdministrationShell_shallow_copy()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                AssetAdministrationShellShallowEquals(
                    instance, instanceCopy),
                "AssetAdministrationShell");
        }  // public void Test_AssetAdministrationShell_shallow_copy

        [Test]
        public void Test_AssetAdministrationShell_deep_copy()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                AssetAdministrationShellDeepEquals(
                    instance, instanceCopy),
                "AssetAdministrationShell");
        }  // public void Test_AssetAdministrationShell_deep_copy

        [Test]
        public void Test_AssetInformation_shallow_copy()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetInformation());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                AssetInformationShallowEquals(
                    instance, instanceCopy),
                "AssetInformation");
        }  // public void Test_AssetInformation_shallow_copy

        [Test]
        public void Test_AssetInformation_deep_copy()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetInformation());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                AssetInformationDeepEquals(
                    instance, instanceCopy),
                "AssetInformation");
        }  // public void Test_AssetInformation_deep_copy

        [Test]
        public void Test_Resource_shallow_copy()
        {
            Aas.Resource instance = (
                Aas.Tests.CommonJsonization.LoadMaximalResource());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ResourceShallowEquals(
                    instance, instanceCopy),
                "Resource");
        }  // public void Test_Resource_shallow_copy

        [Test]
        public void Test_Resource_deep_copy()
        {
            Aas.Resource instance = (
                Aas.Tests.CommonJsonization.LoadMaximalResource());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ResourceDeepEquals(
                    instance, instanceCopy),
                "Resource");
        }  // public void Test_Resource_deep_copy

        [Test]
        public void Test_SpecificAssetId_shallow_copy()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSpecificAssetId());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                SpecificAssetIdShallowEquals(
                    instance, instanceCopy),
                "SpecificAssetId");
        }  // public void Test_SpecificAssetId_shallow_copy

        [Test]
        public void Test_SpecificAssetId_deep_copy()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSpecificAssetId());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                SpecificAssetIdDeepEquals(
                    instance, instanceCopy),
                "SpecificAssetId");
        }  // public void Test_SpecificAssetId_deep_copy

        [Test]
        public void Test_Submodel_shallow_copy()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                SubmodelShallowEquals(
                    instance, instanceCopy),
                "Submodel");
        }  // public void Test_Submodel_shallow_copy

        [Test]
        public void Test_Submodel_deep_copy()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                SubmodelDeepEquals(
                    instance, instanceCopy),
                "Submodel");
        }  // public void Test_Submodel_deep_copy

        [Test]
        public void Test_RelationshipElement_shallow_copy()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                RelationshipElementShallowEquals(
                    instance, instanceCopy),
                "RelationshipElement");
        }  // public void Test_RelationshipElement_shallow_copy

        [Test]
        public void Test_RelationshipElement_deep_copy()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                RelationshipElementDeepEquals(
                    instance, instanceCopy),
                "RelationshipElement");
        }  // public void Test_RelationshipElement_deep_copy

        [Test]
        public void Test_SubmodelElementList_shallow_copy()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                SubmodelElementListShallowEquals(
                    instance, instanceCopy),
                "SubmodelElementList");
        }  // public void Test_SubmodelElementList_shallow_copy

        [Test]
        public void Test_SubmodelElementList_deep_copy()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                SubmodelElementListDeepEquals(
                    instance, instanceCopy),
                "SubmodelElementList");
        }  // public void Test_SubmodelElementList_deep_copy

        [Test]
        public void Test_SubmodelElementCollection_shallow_copy()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                SubmodelElementCollectionShallowEquals(
                    instance, instanceCopy),
                "SubmodelElementCollection");
        }  // public void Test_SubmodelElementCollection_shallow_copy

        [Test]
        public void Test_SubmodelElementCollection_deep_copy()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                SubmodelElementCollectionDeepEquals(
                    instance, instanceCopy),
                "SubmodelElementCollection");
        }  // public void Test_SubmodelElementCollection_deep_copy

        [Test]
        public void Test_Property_shallow_copy()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                PropertyShallowEquals(
                    instance, instanceCopy),
                "Property");
        }  // public void Test_Property_shallow_copy

        [Test]
        public void Test_Property_deep_copy()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                PropertyDeepEquals(
                    instance, instanceCopy),
                "Property");
        }  // public void Test_Property_deep_copy

        [Test]
        public void Test_MultiLanguageProperty_shallow_copy()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                MultiLanguagePropertyShallowEquals(
                    instance, instanceCopy),
                "MultiLanguageProperty");
        }  // public void Test_MultiLanguageProperty_shallow_copy

        [Test]
        public void Test_MultiLanguageProperty_deep_copy()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                MultiLanguagePropertyDeepEquals(
                    instance, instanceCopy),
                "MultiLanguageProperty");
        }  // public void Test_MultiLanguageProperty_deep_copy

        [Test]
        public void Test_Range_shallow_copy()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                RangeShallowEquals(
                    instance, instanceCopy),
                "Range");
        }  // public void Test_Range_shallow_copy

        [Test]
        public void Test_Range_deep_copy()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                RangeDeepEquals(
                    instance, instanceCopy),
                "Range");
        }  // public void Test_Range_deep_copy

        [Test]
        public void Test_ReferenceElement_shallow_copy()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ReferenceElementShallowEquals(
                    instance, instanceCopy),
                "ReferenceElement");
        }  // public void Test_ReferenceElement_shallow_copy

        [Test]
        public void Test_ReferenceElement_deep_copy()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ReferenceElementDeepEquals(
                    instance, instanceCopy),
                "ReferenceElement");
        }  // public void Test_ReferenceElement_deep_copy

        [Test]
        public void Test_Blob_shallow_copy()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                BlobShallowEquals(
                    instance, instanceCopy),
                "Blob");
        }  // public void Test_Blob_shallow_copy

        [Test]
        public void Test_Blob_deep_copy()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                BlobDeepEquals(
                    instance, instanceCopy),
                "Blob");
        }  // public void Test_Blob_deep_copy

        [Test]
        public void Test_File_shallow_copy()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                FileShallowEquals(
                    instance, instanceCopy),
                "File");
        }  // public void Test_File_shallow_copy

        [Test]
        public void Test_File_deep_copy()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                FileDeepEquals(
                    instance, instanceCopy),
                "File");
        }  // public void Test_File_deep_copy

        [Test]
        public void Test_AnnotatedRelationshipElement_shallow_copy()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                AnnotatedRelationshipElementShallowEquals(
                    instance, instanceCopy),
                "AnnotatedRelationshipElement");
        }  // public void Test_AnnotatedRelationshipElement_shallow_copy

        [Test]
        public void Test_AnnotatedRelationshipElement_deep_copy()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                AnnotatedRelationshipElementDeepEquals(
                    instance, instanceCopy),
                "AnnotatedRelationshipElement");
        }  // public void Test_AnnotatedRelationshipElement_deep_copy

        [Test]
        public void Test_Entity_shallow_copy()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                EntityShallowEquals(
                    instance, instanceCopy),
                "Entity");
        }  // public void Test_Entity_shallow_copy

        [Test]
        public void Test_Entity_deep_copy()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                EntityDeepEquals(
                    instance, instanceCopy),
                "Entity");
        }  // public void Test_Entity_deep_copy

        [Test]
        public void Test_EventPayload_shallow_copy()
        {
            Aas.EventPayload instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEventPayload());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                EventPayloadShallowEquals(
                    instance, instanceCopy),
                "EventPayload");
        }  // public void Test_EventPayload_shallow_copy

        [Test]
        public void Test_EventPayload_deep_copy()
        {
            Aas.EventPayload instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEventPayload());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                EventPayloadDeepEquals(
                    instance, instanceCopy),
                "EventPayload");
        }  // public void Test_EventPayload_deep_copy

        [Test]
        public void Test_BasicEventElement_shallow_copy()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                BasicEventElementShallowEquals(
                    instance, instanceCopy),
                "BasicEventElement");
        }  // public void Test_BasicEventElement_shallow_copy

        [Test]
        public void Test_BasicEventElement_deep_copy()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                BasicEventElementDeepEquals(
                    instance, instanceCopy),
                "BasicEventElement");
        }  // public void Test_BasicEventElement_deep_copy

        [Test]
        public void Test_Operation_shallow_copy()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                OperationShallowEquals(
                    instance, instanceCopy),
                "Operation");
        }  // public void Test_Operation_shallow_copy

        [Test]
        public void Test_Operation_deep_copy()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                OperationDeepEquals(
                    instance, instanceCopy),
                "Operation");
        }  // public void Test_Operation_deep_copy

        [Test]
        public void Test_OperationVariable_shallow_copy()
        {
            Aas.OperationVariable instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperationVariable());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                OperationVariableShallowEquals(
                    instance, instanceCopy),
                "OperationVariable");
        }  // public void Test_OperationVariable_shallow_copy

        [Test]
        public void Test_OperationVariable_deep_copy()
        {
            Aas.OperationVariable instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperationVariable());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                OperationVariableDeepEquals(
                    instance, instanceCopy),
                "OperationVariable");
        }  // public void Test_OperationVariable_deep_copy

        [Test]
        public void Test_Capability_shallow_copy()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                CapabilityShallowEquals(
                    instance, instanceCopy),
                "Capability");
        }  // public void Test_Capability_shallow_copy

        [Test]
        public void Test_Capability_deep_copy()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                CapabilityDeepEquals(
                    instance, instanceCopy),
                "Capability");
        }  // public void Test_Capability_deep_copy

        [Test]
        public void Test_ConceptDescription_shallow_copy()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ConceptDescriptionShallowEquals(
                    instance, instanceCopy),
                "ConceptDescription");
        }  // public void Test_ConceptDescription_shallow_copy

        [Test]
        public void Test_ConceptDescription_deep_copy()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ConceptDescriptionDeepEquals(
                    instance, instanceCopy),
                "ConceptDescription");
        }  // public void Test_ConceptDescription_deep_copy

        [Test]
        public void Test_Reference_shallow_copy()
        {
            Aas.Reference instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReference());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ReferenceShallowEquals(
                    instance, instanceCopy),
                "Reference");
        }  // public void Test_Reference_shallow_copy

        [Test]
        public void Test_Reference_deep_copy()
        {
            Aas.Reference instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReference());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ReferenceDeepEquals(
                    instance, instanceCopy),
                "Reference");
        }  // public void Test_Reference_deep_copy

        [Test]
        public void Test_Key_shallow_copy()
        {
            Aas.Key instance = (
                Aas.Tests.CommonJsonization.LoadMaximalKey());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                KeyShallowEquals(
                    instance, instanceCopy),
                "Key");
        }  // public void Test_Key_shallow_copy

        [Test]
        public void Test_Key_deep_copy()
        {
            Aas.Key instance = (
                Aas.Tests.CommonJsonization.LoadMaximalKey());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                KeyDeepEquals(
                    instance, instanceCopy),
                "Key");
        }  // public void Test_Key_deep_copy

        [Test]
        public void Test_LangStringNameType_shallow_copy()
        {
            Aas.LangStringNameType instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringNameType());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                LangStringNameTypeShallowEquals(
                    instance, instanceCopy),
                "LangStringNameType");
        }  // public void Test_LangStringNameType_shallow_copy

        [Test]
        public void Test_LangStringNameType_deep_copy()
        {
            Aas.LangStringNameType instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringNameType());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                LangStringNameTypeDeepEquals(
                    instance, instanceCopy),
                "LangStringNameType");
        }  // public void Test_LangStringNameType_deep_copy

        [Test]
        public void Test_LangStringTextType_shallow_copy()
        {
            Aas.LangStringTextType instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringTextType());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                LangStringTextTypeShallowEquals(
                    instance, instanceCopy),
                "LangStringTextType");
        }  // public void Test_LangStringTextType_shallow_copy

        [Test]
        public void Test_LangStringTextType_deep_copy()
        {
            Aas.LangStringTextType instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringTextType());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                LangStringTextTypeDeepEquals(
                    instance, instanceCopy),
                "LangStringTextType");
        }  // public void Test_LangStringTextType_deep_copy

        [Test]
        public void Test_Environment_shallow_copy()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEnvironment());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                EnvironmentShallowEquals(
                    instance, instanceCopy),
                "Environment");
        }  // public void Test_Environment_shallow_copy

        [Test]
        public void Test_Environment_deep_copy()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEnvironment());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                EnvironmentDeepEquals(
                    instance, instanceCopy),
                "Environment");
        }  // public void Test_Environment_deep_copy

        [Test]
        public void Test_EmbeddedDataSpecification_shallow_copy()
        {
            Aas.EmbeddedDataSpecification instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEmbeddedDataSpecification());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                EmbeddedDataSpecificationShallowEquals(
                    instance, instanceCopy),
                "EmbeddedDataSpecification");
        }  // public void Test_EmbeddedDataSpecification_shallow_copy

        [Test]
        public void Test_EmbeddedDataSpecification_deep_copy()
        {
            Aas.EmbeddedDataSpecification instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEmbeddedDataSpecification());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                EmbeddedDataSpecificationDeepEquals(
                    instance, instanceCopy),
                "EmbeddedDataSpecification");
        }  // public void Test_EmbeddedDataSpecification_deep_copy

        [Test]
        public void Test_LevelType_shallow_copy()
        {
            Aas.LevelType instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLevelType());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                LevelTypeShallowEquals(
                    instance, instanceCopy),
                "LevelType");
        }  // public void Test_LevelType_shallow_copy

        [Test]
        public void Test_LevelType_deep_copy()
        {
            Aas.LevelType instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLevelType());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                LevelTypeDeepEquals(
                    instance, instanceCopy),
                "LevelType");
        }  // public void Test_LevelType_deep_copy

        [Test]
        public void Test_ValueReferencePair_shallow_copy()
        {
            Aas.ValueReferencePair instance = (
                Aas.Tests.CommonJsonization.LoadMaximalValueReferencePair());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ValueReferencePairShallowEquals(
                    instance, instanceCopy),
                "ValueReferencePair");
        }  // public void Test_ValueReferencePair_shallow_copy

        [Test]
        public void Test_ValueReferencePair_deep_copy()
        {
            Aas.ValueReferencePair instance = (
                Aas.Tests.CommonJsonization.LoadMaximalValueReferencePair());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ValueReferencePairDeepEquals(
                    instance, instanceCopy),
                "ValueReferencePair");
        }  // public void Test_ValueReferencePair_deep_copy

        [Test]
        public void Test_ValueList_shallow_copy()
        {
            Aas.ValueList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalValueList());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                ValueListShallowEquals(
                    instance, instanceCopy),
                "ValueList");
        }  // public void Test_ValueList_shallow_copy

        [Test]
        public void Test_ValueList_deep_copy()
        {
            Aas.ValueList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalValueList());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                ValueListDeepEquals(
                    instance, instanceCopy),
                "ValueList");
        }  // public void Test_ValueList_deep_copy

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_shallow_copy()
        {
            Aas.LangStringPreferredNameTypeIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringPreferredNameTypeIec61360());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                LangStringPreferredNameTypeIec61360ShallowEquals(
                    instance, instanceCopy),
                "LangStringPreferredNameTypeIec61360");
        }  // public void Test_LangStringPreferredNameTypeIec61360_shallow_copy

        [Test]
        public void Test_LangStringPreferredNameTypeIec61360_deep_copy()
        {
            Aas.LangStringPreferredNameTypeIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringPreferredNameTypeIec61360());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                LangStringPreferredNameTypeIec61360DeepEquals(
                    instance, instanceCopy),
                "LangStringPreferredNameTypeIec61360");
        }  // public void Test_LangStringPreferredNameTypeIec61360_deep_copy

        [Test]
        public void Test_LangStringShortNameTypeIec61360_shallow_copy()
        {
            Aas.LangStringShortNameTypeIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringShortNameTypeIec61360());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                LangStringShortNameTypeIec61360ShallowEquals(
                    instance, instanceCopy),
                "LangStringShortNameTypeIec61360");
        }  // public void Test_LangStringShortNameTypeIec61360_shallow_copy

        [Test]
        public void Test_LangStringShortNameTypeIec61360_deep_copy()
        {
            Aas.LangStringShortNameTypeIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringShortNameTypeIec61360());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                LangStringShortNameTypeIec61360DeepEquals(
                    instance, instanceCopy),
                "LangStringShortNameTypeIec61360");
        }  // public void Test_LangStringShortNameTypeIec61360_deep_copy

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_shallow_copy()
        {
            Aas.LangStringDefinitionTypeIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringDefinitionTypeIec61360());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                LangStringDefinitionTypeIec61360ShallowEquals(
                    instance, instanceCopy),
                "LangStringDefinitionTypeIec61360");
        }  // public void Test_LangStringDefinitionTypeIec61360_shallow_copy

        [Test]
        public void Test_LangStringDefinitionTypeIec61360_deep_copy()
        {
            Aas.LangStringDefinitionTypeIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalLangStringDefinitionTypeIec61360());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                LangStringDefinitionTypeIec61360DeepEquals(
                    instance, instanceCopy),
                "LangStringDefinitionTypeIec61360");
        }  // public void Test_LangStringDefinitionTypeIec61360_deep_copy

        [Test]
        public void Test_DataSpecificationIec61360_shallow_copy()
        {
            Aas.DataSpecificationIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360());

            var instanceCopy = Aas.Copying.Shallow(instance);

            Assert.IsTrue(
                DataSpecificationIec61360ShallowEquals(
                    instance, instanceCopy),
                "DataSpecificationIec61360");
        }  // public void Test_DataSpecificationIec61360_shallow_copy

        [Test]
        public void Test_DataSpecificationIec61360_deep_copy()
        {
            Aas.DataSpecificationIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360());

            var instanceCopy = Aas.Copying.Deep(instance);

            Assert.IsTrue(
                DataSpecificationIec61360DeepEquals(
                    instance, instanceCopy),
                "DataSpecificationIec61360");
        }  // public void Test_DataSpecificationIec61360_deep_copy

        [Test]
        public void Test_snippet_in_docs()
        {
            // Prepare the environment
            var someProperty = new Aas.Property(
                Aas.DataTypeDefXsd.Boolean)
            {
                IdShort = "someProperty",
            };

            var submodel = new Aas.Submodel(
                "some-unique-global-identifier")
            {
                SubmodelElements = new List<Aas.ISubmodelElement>()
                {
                    someProperty
                }
            };

            var environment = new Aas.Environment()
            {
                Submodels = new List<Aas.ISubmodel>()
                {
                    submodel
                }
            };

            // Make a deep copy
            var deepCopy = Aas.Copying.Deep(environment);

            // Make a shallow copy
            var shallowCopy = Aas.Copying.Shallow(environment);

            // Changes to the property affect only the shallow copy,
            // but not the deep one
            environment.Submodels[0].SubmodelElements![0].IdShort = "changed";

            Assert.AreEqual(
                "changed",
                shallowCopy.Submodels![0].SubmodelElements![0].IdShort);

            Assert.AreEqual(
                "someProperty",
                deepCopy.Submodels![0].SubmodelElements![0].IdShort);
        }  // public void Test_snippet_in_docs
    }  // class TestCopying
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
