/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

using NUnit.Framework;  // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestJsonizationOfInterfaces
    {
        [Test]
        public void Test_round_trip_IHasSemantics_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Blob

        [Test]
        public void Test_round_trip_IHasSemantics_from_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Capability " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Capability

        [Test]
        public void Test_round_trip_IHasSemantics_from_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Entity " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Entity

        [Test]
        public void Test_round_trip_IHasSemantics_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_File

        [Test]
        public void Test_round_trip_IHasSemantics_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasSemantics_from_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Operation " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Operation

        [Test]
        public void Test_round_trip_IHasSemantics_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Property

        [Test]
        public void Test_round_trip_IHasSemantics_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Range

        [Test]
        public void Test_round_trip_IHasSemantics_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasSemantics_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_Submodel

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementCollection " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasSemantics_from_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasSemanticsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementList " +
                    "as IHasSemantics, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasSemantics_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IHasExtensions_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_AssetAdministrationShell()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AssetAdministrationShell " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasExtensions_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Blob

        [Test]
        public void Test_round_trip_IHasExtensions_from_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Capability " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Capability

        [Test]
        public void Test_round_trip_IHasExtensions_from_ConceptDescription()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalConceptDescription();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ConceptDescription " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasExtensions_from_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Entity " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Entity

        [Test]
        public void Test_round_trip_IHasExtensions_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_File

        [Test]
        public void Test_round_trip_IHasExtensions_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasExtensions_from_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Operation " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Operation

        [Test]
        public void Test_round_trip_IHasExtensions_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Property

        [Test]
        public void Test_round_trip_IHasExtensions_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Range

        [Test]
        public void Test_round_trip_IHasExtensions_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasExtensions_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_Submodel

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementCollection " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasExtensions_from_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasExtensionsFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementList " +
                    "as IHasExtensions, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasExtensions_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IReferable_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IReferable_from_AssetAdministrationShell()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AssetAdministrationShell " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IReferable_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IReferable_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Blob

        [Test]
        public void Test_round_trip_IReferable_from_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Capability " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Capability

        [Test]
        public void Test_round_trip_IReferable_from_ConceptDescription()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalConceptDescription();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ConceptDescription " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IReferable_from_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Entity " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Entity

        [Test]
        public void Test_round_trip_IReferable_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_File

        [Test]
        public void Test_round_trip_IReferable_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IReferable_from_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Operation " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Operation

        [Test]
        public void Test_round_trip_IReferable_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Property

        [Test]
        public void Test_round_trip_IReferable_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Range

        [Test]
        public void Test_round_trip_IReferable_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IReferable_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_Submodel

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementCollection " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IReferable_from_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IReferableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementList " +
                    "as IReferable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IReferable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IIdentifiable_from_AssetAdministrationShell()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IIdentifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AssetAdministrationShell " +
                    "as IIdentifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IIdentifiable_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IIdentifiable_from_ConceptDescription()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalConceptDescription();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IIdentifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ConceptDescription " +
                    "as IIdentifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IIdentifiable_from_ConceptDescription

        [Test]
        public void Test_round_trip_IIdentifiable_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IIdentifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IIdentifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IIdentifiable_from_Submodel

        [Test]
        public void Test_round_trip_IHasKind_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasKindFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IHasKind, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasKind_from_Submodel

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_RelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AssetAdministrationShell " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_AssetAdministrationShell

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_BasicEventElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Blob

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Capability " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Capability

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ConceptDescription()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalConceptDescription();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ConceptDescription " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_ConceptDescription

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Entity " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Entity

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_File

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Operation " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Operation

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Property

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Range

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_ReferenceElement

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_Submodel

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementCollection " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IHasDataSpecification_from_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IHasDataSpecificationFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementList " +
                    "as IHasDataSpecification, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IHasDataSpecification_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IQualifiable_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_RelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IQualifiable_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_BasicEventElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Blob

        [Test]
        public void Test_round_trip_IQualifiable_from_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Capability " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Capability

        [Test]
        public void Test_round_trip_IQualifiable_from_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Entity " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Entity

        [Test]
        public void Test_round_trip_IQualifiable_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_File

        [Test]
        public void Test_round_trip_IQualifiable_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IQualifiable_from_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Operation " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Operation

        [Test]
        public void Test_round_trip_IQualifiable_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Property

        [Test]
        public void Test_round_trip_IQualifiable_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Range

        [Test]
        public void Test_round_trip_IQualifiable_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_ReferenceElement

        [Test]
        public void Test_round_trip_IQualifiable_from_Submodel()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodel();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Submodel " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_Submodel

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementCollection " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_IQualifiable_from_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IQualifiableFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementList " +
                    "as IQualifiable, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IQualifiable_from_SubmodelElementList

        [Test]
        public void Test_round_trip_ISubmodelElement_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_BasicEventElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Blob

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Capability()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalCapability();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Capability " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Capability

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Entity()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalEntity();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Entity " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Entity

        [Test]
        public void Test_round_trip_ISubmodelElement_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_File

        [Test]
        public void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Operation()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalOperation();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Operation " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Operation

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Property

        [Test]
        public void Test_round_trip_ISubmodelElement_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_Range

        [Test]
        public void Test_round_trip_ISubmodelElement_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementCollection " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementCollection

        [Test]
        public void Test_round_trip_ISubmodelElement_from_SubmodelElementList()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.ISubmodelElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of SubmodelElementList " +
                    "as ISubmodelElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_ISubmodelElement_from_SubmodelElementList

        [Test]
        public void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IRelationshipElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of AnnotatedRelationshipElement " +
                    "as IRelationshipElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IRelationshipElement_from_AnnotatedRelationshipElement

        [Test]
        public void Test_round_trip_IRelationshipElement_from_RelationshipElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IRelationshipElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of RelationshipElement " +
                    "as IRelationshipElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IRelationshipElement_from_RelationshipElement

        [Test]
        public void Test_round_trip_IDataElement_from_Blob()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBlob();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Blob " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_Blob

        [Test]
        public void Test_round_trip_IDataElement_from_File()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalFile();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of File " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_File

        [Test]
        public void Test_round_trip_IDataElement_from_MultiLanguageProperty()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of MultiLanguageProperty " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_MultiLanguageProperty

        [Test]
        public void Test_round_trip_IDataElement_from_Property()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalProperty();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Property " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_Property

        [Test]
        public void Test_round_trip_IDataElement_from_Range()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalRange();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of Range " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_Range

        [Test]
        public void Test_round_trip_IDataElement_from_ReferenceElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalReferenceElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of ReferenceElement " +
                    "as IDataElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataElement_from_ReferenceElement

        [Test]
        public void Test_round_trip_IEventElement_from_BasicEventElement()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IEventElementFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of BasicEventElement " +
                    "as IEventElement, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IEventElement_from_BasicEventElement

        [Test]
        public void Test_round_trip_IDataSpecificationContent_from_DataSpecificationIec61360()
        {
            var instance = Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360();

            var jsonObject = Aas.Jsonization.Serialize.ToJsonObject(instance);

            var anotherInstance = Aas.Jsonization.Deserialize.IDataSpecificationContentFrom(
                jsonObject);

            var anotherJsonObject = Aas.Jsonization.Serialize.ToJsonObject(
                anotherInstance);
            
            Aas.Tests.CommonJson.CheckJsonNodesEqual(
                jsonObject,
                anotherJsonObject,
                out Aas.Reporting.Error? error);

            if (error != null)
            {
                Assert.Fail(
                    "When we serialize the complete instance of DataSpecificationIec61360 " +
                    "as IDataSpecificationContent, we get an error in the round trip: " +
                    $"{Reporting.GenerateJsonPath(error.PathSegments)}: " +
                    error.Cause
                );
            }
        }  // void Test_round_trip_IDataSpecificationContent_from_DataSpecificationIec61360
    }  // class TestJsonizationOfInterfaces
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
