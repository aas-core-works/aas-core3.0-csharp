/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

using NUnit.Framework;  // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestOverXOrEmpty
    {
        [Test]
        public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMaximalExtension()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Extension"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMinimalExtension());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Extension"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Extension_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Extension_OverRefersToOrEmpty_non_default()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMaximalExtension()
            );
    
            if (instance.RefersTo == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "RefersTo == null " +
                    "in the maximal example of " +
                    "Extension"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverRefersToOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.RefersTo.Count, 
                count
            );
        }  // public void Test_Extension_OverRefersToOrEmpty_non_default

        [Test]
        public void Test_Extension_OverRefersToOrEmpty_default()
        {
            Aas.Extension instance = (
                Aas.Tests.CommonJsonization.LoadMinimalExtension());

            if (instance.RefersTo != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "RefersTo != null " +
                    "in the minimal example of " +
                    "Extension"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverRefersToOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Extension_OverRefersToOrEmpty_default

        [Test]
        public void Test_AdministrativeInformation_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAdministrativeInformation()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "AdministrativeInformation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_AdministrativeInformation_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_AdministrativeInformation_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.AdministrativeInformation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAdministrativeInformation());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "AdministrativeInformation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AdministrativeInformation_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadMaximalQualifier()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Qualifier"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Qualifier instance = (
                Aas.Tests.CommonJsonization.LoadMinimalQualifier());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Qualifier"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Qualifier_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "AssetAdministrationShell"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "AssetAdministrationShell"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverExtensionsOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverDisplayNameOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "AssetAdministrationShell"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_AssetAdministrationShell_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverDisplayNameOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "AssetAdministrationShell"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverDescriptionOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "AssetAdministrationShell"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_AssetAdministrationShell_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverDescriptionOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "AssetAdministrationShell"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverDescriptionOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "AssetAdministrationShell"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_AssetAdministrationShell_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "AssetAdministrationShell"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_non_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAssetAdministrationShell()
            );
    
            if (instance.Submodels == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Submodels == null " +
                    "in the maximal example of " +
                    "AssetAdministrationShell"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Submodels.Count, 
                count
            );
        }  // public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_non_default

        [Test]
        public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_default()
        {
            Aas.AssetAdministrationShell instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetAdministrationShell());

            if (instance.Submodels != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Submodels != null " +
                    "in the minimal example of " +
                    "AssetAdministrationShell"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AssetAdministrationShell_OverSubmodelsOrEmpty_default

        // The maximal example of AssetInformation contains no SpecificAssetIds,
        // so we can not generate the corresponding test case 
        // Test_AssetInformation_OverSpecificAssetIdsOrEmpty_non_default.

        [Test]
        public void Test_AssetInformation_OverSpecificAssetIdsOrEmpty_default()
        {
            Aas.AssetInformation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAssetInformation());

            if (instance.SpecificAssetIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SpecificAssetIds != null " +
                    "in the minimal example of " +
                    "AssetInformation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSpecificAssetIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AssetInformation_OverSpecificAssetIdsOrEmpty_default

        [Test]
        public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSpecificAssetId()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "SpecificAssetId"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.SpecificAssetId instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSpecificAssetId());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "SpecificAssetId"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SpecificAssetId_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Submodel_OverExtensionsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Submodel_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverExtensionsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Submodel_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Submodel_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverDisplayNameOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Submodel_OverDescriptionOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Submodel_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverDescriptionOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Submodel_OverQualifiersOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Submodel_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverQualifiersOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Submodel_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Submodel_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Submodel_OverSubmodelElementsOrEmpty_non_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodel()
            );
    
            if (instance.SubmodelElements == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SubmodelElements == null " +
                    "in the maximal example of " +
                    "Submodel"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSubmodelElementsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SubmodelElements.Count, 
                count
            );
        }  // public void Test_Submodel_OverSubmodelElementsOrEmpty_non_default

        [Test]
        public void Test_Submodel_OverSubmodelElementsOrEmpty_default()
        {
            Aas.Submodel instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodel());

            if (instance.SubmodelElements != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SubmodelElements != null " +
                    "in the minimal example of " +
                    "Submodel"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSubmodelElementsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Submodel_OverSubmodelElementsOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "RelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_RelationshipElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverExtensionsOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "RelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverDisplayNameOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "RelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_RelationshipElement_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverDisplayNameOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "RelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverDescriptionOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "RelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_RelationshipElement_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverDescriptionOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "RelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverDescriptionOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "RelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "RelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "RelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_RelationshipElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverQualifiersOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "RelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_RelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRelationshipElement()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "RelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_RelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_RelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.RelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRelationshipElement());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "RelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_RelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverExtensionsOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverExtensionsOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverExtensionsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverDisplayNameOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverDisplayNameOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverDescriptionOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverDescriptionOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverDescriptionOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverQualifiersOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverQualifiersOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverQualifiersOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_SubmodelElementList_OverValueOrEmpty_non_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementList()
            );
    
            if (instance.Value == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Value == null " +
                    "in the maximal example of " +
                    "SubmodelElementList"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Value.Count, 
                count
            );
        }  // public void Test_SubmodelElementList_OverValueOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementList_OverValueOrEmpty_default()
        {
            Aas.SubmodelElementList instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementList());

            if (instance.Value != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Value != null " +
                    "in the minimal example of " +
                    "SubmodelElementList"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementList_OverValueOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverExtensionsOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverDisplayNameOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverDisplayNameOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverDescriptionOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverDescriptionOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverDescriptionOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverQualifiersOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_SubmodelElementCollection_OverValueOrEmpty_non_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMaximalSubmodelElementCollection()
            );
    
            if (instance.Value == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Value == null " +
                    "in the maximal example of " +
                    "SubmodelElementCollection"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Value.Count, 
                count
            );
        }  // public void Test_SubmodelElementCollection_OverValueOrEmpty_non_default

        [Test]
        public void Test_SubmodelElementCollection_OverValueOrEmpty_default()
        {
            Aas.SubmodelElementCollection instance = (
                Aas.Tests.CommonJsonization.LoadMinimalSubmodelElementCollection());

            if (instance.Value != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Value != null " +
                    "in the minimal example of " +
                    "SubmodelElementCollection"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_SubmodelElementCollection_OverValueOrEmpty_default

        [Test]
        public void Test_Property_OverExtensionsOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Property"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Property_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Property_OverExtensionsOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Property"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Property_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Property"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Property_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Property_OverDisplayNameOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Property"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Property_OverDescriptionOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Property"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Property_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Property_OverDescriptionOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Property"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Property_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Property"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Property_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Property_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Property"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Property_OverQualifiersOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Property"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Property_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Property_OverQualifiersOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Property"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Property_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMaximalProperty()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Property"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Property_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Property_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Property instance = (
                Aas.Tests.CommonJsonization.LoadMinimalProperty());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Property"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Property_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverExtensionsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverDisplayNameOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverDisplayNameOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverDescriptionOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverDescriptionOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverDescriptionOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverQualifiersOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_MultiLanguageProperty_OverValueOrEmpty_non_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMaximalMultiLanguageProperty()
            );
    
            if (instance.Value == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Value == null " +
                    "in the maximal example of " +
                    "MultiLanguageProperty"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Value.Count, 
                count
            );
        }  // public void Test_MultiLanguageProperty_OverValueOrEmpty_non_default

        [Test]
        public void Test_MultiLanguageProperty_OverValueOrEmpty_default()
        {
            Aas.MultiLanguageProperty instance = (
                Aas.Tests.CommonJsonization.LoadMinimalMultiLanguageProperty());

            if (instance.Value != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Value != null " +
                    "in the minimal example of " +
                    "MultiLanguageProperty"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverValueOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_MultiLanguageProperty_OverValueOrEmpty_default

        [Test]
        public void Test_Range_OverExtensionsOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Range"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Range_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Range_OverExtensionsOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Range"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Range_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Range"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Range_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Range_OverDisplayNameOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Range"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Range_OverDescriptionOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Range"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Range_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Range_OverDescriptionOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Range"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Range_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Range"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Range_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Range_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Range"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Range_OverQualifiersOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Range"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Range_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Range_OverQualifiersOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Range"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Range_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMaximalRange()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Range"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Range_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Range_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Range instance = (
                Aas.Tests.CommonJsonization.LoadMinimalRange());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Range"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Range_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "ReferenceElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_ReferenceElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverExtensionsOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "ReferenceElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverDisplayNameOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "ReferenceElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_ReferenceElement_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverDisplayNameOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "ReferenceElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverDescriptionOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "ReferenceElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_ReferenceElement_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverDescriptionOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "ReferenceElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverDescriptionOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "ReferenceElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "ReferenceElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "ReferenceElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_ReferenceElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverQualifiersOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "ReferenceElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_ReferenceElement_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalReferenceElement()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "ReferenceElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_ReferenceElement_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_ReferenceElement_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.ReferenceElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalReferenceElement());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "ReferenceElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ReferenceElement_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Blob_OverExtensionsOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Blob"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Blob_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Blob_OverExtensionsOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Blob"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Blob_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Blob"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Blob_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Blob_OverDisplayNameOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Blob"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Blob_OverDescriptionOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Blob"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Blob_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Blob_OverDescriptionOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Blob"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Blob"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Blob"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Blob_OverQualifiersOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Blob"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Blob_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Blob_OverQualifiersOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Blob"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Blob_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBlob()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Blob"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Blob_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Blob_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Blob instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBlob());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Blob"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Blob_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_File_OverExtensionsOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "File"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_File_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_File_OverExtensionsOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "File"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverExtensionsOrEmpty_default

        [Test]
        public void Test_File_OverDisplayNameOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "File"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_File_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_File_OverDisplayNameOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "File"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_File_OverDescriptionOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "File"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_File_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_File_OverDescriptionOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "File"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverDescriptionOrEmpty_default

        [Test]
        public void Test_File_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "File"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_File_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_File_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "File"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_File_OverQualifiersOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "File"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_File_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_File_OverQualifiersOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "File"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverQualifiersOrEmpty_default

        [Test]
        public void Test_File_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMaximalFile()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "File"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_File_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_File_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.File instance = (
                Aas.Tests.CommonJsonization.LoadMinimalFile());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "File"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_File_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverDisplayNameOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverDisplayNameOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverDescriptionOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverDescriptionOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverDescriptionOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_non_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalAnnotatedRelationshipElement()
            );
    
            if (instance.Annotations == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Annotations == null " +
                    "in the maximal example of " +
                    "AnnotatedRelationshipElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverAnnotationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Annotations.Count, 
                count
            );
        }  // public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_non_default

        [Test]
        public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_default()
        {
            Aas.AnnotatedRelationshipElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalAnnotatedRelationshipElement());

            if (instance.Annotations != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Annotations != null " +
                    "in the minimal example of " +
                    "AnnotatedRelationshipElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverAnnotationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_AnnotatedRelationshipElement_OverAnnotationsOrEmpty_default

        [Test]
        public void Test_Entity_OverExtensionsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Entity_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverExtensionsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Entity_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Entity_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Entity_OverDisplayNameOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Entity_OverDescriptionOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Entity_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Entity_OverDescriptionOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Entity_OverQualifiersOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Entity_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Entity_OverQualifiersOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Entity_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Entity_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Entity_OverStatementsOrEmpty_non_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEntity()
            );
    
            if (instance.Statements == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Statements == null " +
                    "in the maximal example of " +
                    "Entity"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverStatementsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Statements.Count, 
                count
            );
        }  // public void Test_Entity_OverStatementsOrEmpty_non_default

        [Test]
        public void Test_Entity_OverStatementsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.Statements != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Statements != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverStatementsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverStatementsOrEmpty_default

        // The maximal example of Entity contains no SpecificAssetIds,
        // so we can not generate the corresponding test case 
        // Test_Entity_OverSpecificAssetIdsOrEmpty_non_default.

        [Test]
        public void Test_Entity_OverSpecificAssetIdsOrEmpty_default()
        {
            Aas.Entity instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEntity());

            if (instance.SpecificAssetIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SpecificAssetIds != null " +
                    "in the minimal example of " +
                    "Entity"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSpecificAssetIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Entity_OverSpecificAssetIdsOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverExtensionsOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "BasicEventElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_BasicEventElement_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverExtensionsOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "BasicEventElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverExtensionsOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverDisplayNameOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "BasicEventElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_BasicEventElement_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverDisplayNameOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "BasicEventElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverDescriptionOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "BasicEventElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_BasicEventElement_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverDescriptionOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "BasicEventElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverDescriptionOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "BasicEventElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "BasicEventElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverQualifiersOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "BasicEventElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_BasicEventElement_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverQualifiersOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "BasicEventElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverQualifiersOrEmpty_default

        [Test]
        public void Test_BasicEventElement_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMaximalBasicEventElement()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "BasicEventElement"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_BasicEventElement_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_BasicEventElement_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.BasicEventElement instance = (
                Aas.Tests.CommonJsonization.LoadMinimalBasicEventElement());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "BasicEventElement"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_BasicEventElement_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Operation_OverExtensionsOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Operation_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Operation_OverExtensionsOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Operation_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Operation_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Operation_OverDisplayNameOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Operation_OverDescriptionOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Operation_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Operation_OverDescriptionOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Operation_OverQualifiersOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Operation_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Operation_OverQualifiersOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Operation_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Operation_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Operation_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_Operation_OverInputVariablesOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.InputVariables == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "InputVariables == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverInputVariablesOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.InputVariables.Count, 
                count
            );
        }  // public void Test_Operation_OverInputVariablesOrEmpty_non_default

        [Test]
        public void Test_Operation_OverInputVariablesOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.InputVariables != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "InputVariables != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverInputVariablesOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverInputVariablesOrEmpty_default

        [Test]
        public void Test_Operation_OverOutputVariablesOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.OutputVariables == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "OutputVariables == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverOutputVariablesOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.OutputVariables.Count, 
                count
            );
        }  // public void Test_Operation_OverOutputVariablesOrEmpty_non_default

        [Test]
        public void Test_Operation_OverOutputVariablesOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.OutputVariables != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "OutputVariables != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverOutputVariablesOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverOutputVariablesOrEmpty_default

        [Test]
        public void Test_Operation_OverInoutputVariablesOrEmpty_non_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMaximalOperation()
            );
    
            if (instance.InoutputVariables == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "InoutputVariables == null " +
                    "in the maximal example of " +
                    "Operation"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverInoutputVariablesOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.InoutputVariables.Count, 
                count
            );
        }  // public void Test_Operation_OverInoutputVariablesOrEmpty_non_default

        [Test]
        public void Test_Operation_OverInoutputVariablesOrEmpty_default()
        {
            Aas.Operation instance = (
                Aas.Tests.CommonJsonization.LoadMinimalOperation());

            if (instance.InoutputVariables != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "InoutputVariables != null " +
                    "in the minimal example of " +
                    "Operation"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverInoutputVariablesOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Operation_OverInoutputVariablesOrEmpty_default

        [Test]
        public void Test_Capability_OverExtensionsOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "Capability"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_Capability_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_Capability_OverExtensionsOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "Capability"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverExtensionsOrEmpty_default

        [Test]
        public void Test_Capability_OverDisplayNameOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "Capability"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_Capability_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_Capability_OverDisplayNameOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "Capability"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_Capability_OverDescriptionOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "Capability"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_Capability_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_Capability_OverDescriptionOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "Capability"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverDescriptionOrEmpty_default

        [Test]
        public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );
    
            if (instance.SupplementalSemanticIds == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds == null " +
                    "in the maximal example of " +
                    "Capability"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.SupplementalSemanticIds.Count, 
                count
            );
        }  // public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_non_default

        [Test]
        public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            if (instance.SupplementalSemanticIds != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "SupplementalSemanticIds != null " +
                    "in the minimal example of " +
                    "Capability"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSupplementalSemanticIdsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverSupplementalSemanticIdsOrEmpty_default

        [Test]
        public void Test_Capability_OverQualifiersOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );
    
            if (instance.Qualifiers == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers == null " +
                    "in the maximal example of " +
                    "Capability"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Qualifiers.Count, 
                count
            );
        }  // public void Test_Capability_OverQualifiersOrEmpty_non_default

        [Test]
        public void Test_Capability_OverQualifiersOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            if (instance.Qualifiers != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Qualifiers != null " +
                    "in the minimal example of " +
                    "Capability"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverQualifiersOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverQualifiersOrEmpty_default

        [Test]
        public void Test_Capability_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMaximalCapability()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "Capability"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_Capability_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_Capability_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.Capability instance = (
                Aas.Tests.CommonJsonization.LoadMinimalCapability());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "Capability"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Capability_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverExtensionsOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription()
            );
    
            if (instance.Extensions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions == null " +
                    "in the maximal example of " +
                    "ConceptDescription"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Extensions.Count, 
                count
            );
        }  // public void Test_ConceptDescription_OverExtensionsOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverExtensionsOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            if (instance.Extensions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Extensions != null " +
                    "in the minimal example of " +
                    "ConceptDescription"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverExtensionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverExtensionsOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverDisplayNameOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription()
            );
    
            if (instance.DisplayName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName == null " +
                    "in the maximal example of " +
                    "ConceptDescription"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.DisplayName.Count, 
                count
            );
        }  // public void Test_ConceptDescription_OverDisplayNameOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverDisplayNameOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            if (instance.DisplayName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "DisplayName != null " +
                    "in the minimal example of " +
                    "ConceptDescription"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDisplayNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverDisplayNameOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverDescriptionOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription()
            );
    
            if (instance.Description == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description == null " +
                    "in the maximal example of " +
                    "ConceptDescription"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Description.Count, 
                count
            );
        }  // public void Test_ConceptDescription_OverDescriptionOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverDescriptionOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            if (instance.Description != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Description != null " +
                    "in the minimal example of " +
                    "ConceptDescription"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDescriptionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverDescriptionOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverEmbeddedDataSpecificationsOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription()
            );
    
            if (instance.EmbeddedDataSpecifications == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications == null " +
                    "in the maximal example of " +
                    "ConceptDescription"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.EmbeddedDataSpecifications.Count, 
                count
            );
        }  // public void Test_ConceptDescription_OverEmbeddedDataSpecificationsOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverEmbeddedDataSpecificationsOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            if (instance.EmbeddedDataSpecifications != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "EmbeddedDataSpecifications != null " +
                    "in the minimal example of " +
                    "ConceptDescription"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverEmbeddedDataSpecificationsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverEmbeddedDataSpecificationsOrEmpty_default

        [Test]
        public void Test_ConceptDescription_OverIsCaseOfOrEmpty_non_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMaximalConceptDescription()
            );
    
            if (instance.IsCaseOf == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "IsCaseOf == null " +
                    "in the maximal example of " +
                    "ConceptDescription"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverIsCaseOfOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.IsCaseOf.Count, 
                count
            );
        }  // public void Test_ConceptDescription_OverIsCaseOfOrEmpty_non_default

        [Test]
        public void Test_ConceptDescription_OverIsCaseOfOrEmpty_default()
        {
            Aas.ConceptDescription instance = (
                Aas.Tests.CommonJsonization.LoadMinimalConceptDescription());

            if (instance.IsCaseOf != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "IsCaseOf != null " +
                    "in the minimal example of " +
                    "ConceptDescription"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverIsCaseOfOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_ConceptDescription_OverIsCaseOfOrEmpty_default

        [Test]
        public void Test_Environment_OverAssetAdministrationShellsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEnvironment()
            );
    
            if (instance.AssetAdministrationShells == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "AssetAdministrationShells == null " +
                    "in the maximal example of " +
                    "Environment"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverAssetAdministrationShellsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.AssetAdministrationShells.Count, 
                count
            );
        }  // public void Test_Environment_OverAssetAdministrationShellsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverAssetAdministrationShellsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            if (instance.AssetAdministrationShells != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "AssetAdministrationShells != null " +
                    "in the minimal example of " +
                    "Environment"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverAssetAdministrationShellsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverAssetAdministrationShellsOrEmpty_default

        [Test]
        public void Test_Environment_OverSubmodelsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEnvironment()
            );
    
            if (instance.Submodels == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Submodels == null " +
                    "in the maximal example of " +
                    "Environment"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Submodels.Count, 
                count
            );
        }  // public void Test_Environment_OverSubmodelsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverSubmodelsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            if (instance.Submodels != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Submodels != null " +
                    "in the minimal example of " +
                    "Environment"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverSubmodelsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverSubmodelsOrEmpty_default

        [Test]
        public void Test_Environment_OverConceptDescriptionsOrEmpty_non_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMaximalEnvironment()
            );
    
            if (instance.ConceptDescriptions == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "ConceptDescriptions == null " +
                    "in the maximal example of " +
                    "Environment"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverConceptDescriptionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.ConceptDescriptions.Count, 
                count
            );
        }  // public void Test_Environment_OverConceptDescriptionsOrEmpty_non_default

        [Test]
        public void Test_Environment_OverConceptDescriptionsOrEmpty_default()
        {
            Aas.Environment instance = (
                Aas.Tests.CommonJsonization.LoadMinimalEnvironment());

            if (instance.ConceptDescriptions != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "ConceptDescriptions != null " +
                    "in the minimal example of " +
                    "Environment"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverConceptDescriptionsOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_Environment_OverConceptDescriptionsOrEmpty_default

        [Test]
        public void Test_DataSpecificationIec61360_OverShortNameOrEmpty_non_default()
        {
            Aas.DataSpecificationIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360()
            );
    
            if (instance.ShortName == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "ShortName == null " +
                    "in the maximal example of " +
                    "DataSpecificationIec61360"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverShortNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.ShortName.Count, 
                count
            );
        }  // public void Test_DataSpecificationIec61360_OverShortNameOrEmpty_non_default

        [Test]
        public void Test_DataSpecificationIec61360_OverShortNameOrEmpty_default()
        {
            Aas.DataSpecificationIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMinimalDataSpecificationIec61360());

            if (instance.ShortName != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "ShortName != null " +
                    "in the minimal example of " +
                    "DataSpecificationIec61360"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverShortNameOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_DataSpecificationIec61360_OverShortNameOrEmpty_default

        [Test]
        public void Test_DataSpecificationIec61360_OverDefinitionOrEmpty_non_default()
        {
            Aas.DataSpecificationIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMaximalDataSpecificationIec61360()
            );
    
            if (instance.Definition == null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Definition == null " +
                    "in the maximal example of " +
                    "DataSpecificationIec61360"
                );
            }
    
            int count = 0;
            foreach (var _ in instance.OverDefinitionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(
                instance.Definition.Count, 
                count
            );
        }  // public void Test_DataSpecificationIec61360_OverDefinitionOrEmpty_non_default

        [Test]
        public void Test_DataSpecificationIec61360_OverDefinitionOrEmpty_default()
        {
            Aas.DataSpecificationIec61360 instance = (
                Aas.Tests.CommonJsonization.LoadMinimalDataSpecificationIec61360());

            if (instance.Definition != null)
            {
                throw new System.ArgumentException(
                    "Unexpected " +
                    "Definition != null " +
                    "in the minimal example of " +
                    "DataSpecificationIec61360"
                );
            }

            int count = 0;
            foreach (var _ in instance.OverDefinitionOrEmpty())
            {
                count++;
            } 

            Assert.AreEqual(0, count);
        }  // public void Test_DataSpecificationIec61360_OverDefinitionOrEmpty_default
    }  // class TestOverXOrEmpty
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
