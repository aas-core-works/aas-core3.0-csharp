"""Generate the test code for the XML de/serialization of interfaces."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.csharp.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped

from test_codegen.common import load_symbol_table


def main() -> int:
    """Execute the main routine."""
    symbol_table = load_symbol_table()

    # noinspection PyListCreation
    blocks = []  # type: List[str]

    for our_type in symbol_table.our_types:
        if not isinstance(our_type, intermediate.Class):
            continue

        if our_type.interface is None or len(our_type.interface.implementers) == 0:
            continue

        if our_type.name == aas_core_codegen.common.Identifier("Event_payload"):
            # NOTE (mristin, 2022-06-21):
            # Event payload is a dangling class and can not be reached from
            # the environment. Hence, we skip it.
            continue

        for cls in our_type.interface.implementers:
            if cls.serialization is None or not cls.serialization.with_model_type:
                continue

            interface_name_csharp = aas_core_codegen.csharp.naming.interface_name(
                our_type.interface.name
            )

            cls_name_csharp = aas_core_codegen.csharp.naming.class_name(cls.name)

            blocks.append(
                Stripped(
                    f"""\
[Test]
public void Test_round_trip_{interface_name_csharp}_from_{cls_name_csharp}()
{{
    // We load from JSON here just to jump-start the round trip.
    // The round-trip goes then over XML.
    var instance = Aas.Tests.CommonJsonization.LoadMaximal{cls_name_csharp}();

    // The round-trip starts here.
    var outputBuilder = new System.Text.StringBuilder();

    // Serialize to XML
    {{
        using var xmlWriter = System.Xml.XmlWriter.Create(
            outputBuilder,
            new System.Xml.XmlWriterSettings()
            {{
                Encoding = System.Text.Encoding.UTF8,
                OmitXmlDeclaration = true
            }});

        Aas.Xmlization.Serialize.To(
            instance,
            xmlWriter);
    }}

    // De-serialize from XML
    string outputText = outputBuilder.ToString();

    using var outputReader = new System.IO.StringReader(outputText);

    using var xmlReader = System.Xml.XmlReader.Create(
        outputReader,
        new System.Xml.XmlReaderSettings());

    var anotherInstance = Aas.Xmlization.Deserialize.{interface_name_csharp}From(
        xmlReader);

    // Serialize back to XML
    var anotherOutputBuilder = new System.Text.StringBuilder();

    {{
        using var anotherXmlWriter = System.Xml.XmlWriter.Create(
            anotherOutputBuilder,
            new System.Xml.XmlWriterSettings()
            {{
                Encoding = System.Text.Encoding.UTF8,
                OmitXmlDeclaration = true
            }});

        Aas.Xmlization.Serialize.To(
            anotherInstance,
            anotherXmlWriter);
    }}


    // Compare
    Assert.AreEqual(outputText, anotherOutputBuilder.ToString());
}}  // void Test_round_trip_{interface_name_csharp}_from_{cls_name_csharp}"""
                )
            )

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

using NUnit.Framework;  // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestXmlizationOfInterfaces
    {
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, "        "))

    writer.write(
        """
    }  // class TestXmlizationOfInterfaces
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent

    target_pth = repo_root / "src/AasCore.Aas3_0.Tests/TestXmlizationOfInterfaces.cs"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
