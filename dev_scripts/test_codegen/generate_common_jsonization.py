"""Generate the common functions to de/serialize instances of a class."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.csharp.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped
from aas_core_codegen.csharp import common as csharp_common

import test_codegen.common
from test_codegen import test_data_io


def main() -> int:
    """Execute the main routine."""
    symbol_table = test_codegen.common.load_symbol_table()

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent

    test_data_dir = repo_root / "test_data"

    # noinspection PyListCreation
    blocks = []  # type: List[str]

    environment_cls = symbol_table.must_find_concrete_class(
        aas_core_codegen.common.Identifier("Environment")
    )

    for our_type in symbol_table.our_types:
        if not isinstance(our_type, intermediate.ConcreteClass):
            continue

        container_cls = test_data_io.determine_container_class(
            cls=our_type, test_data_dir=test_data_dir, environment_cls=environment_cls
        )
        container_cls_csharp = aas_core_codegen.csharp.naming.class_name(
            container_cls.name
        )

        cls_name_csharp = aas_core_codegen.csharp.naming.class_name(our_type.name)
        cls_name_json = aas_core_codegen.naming.json_model_type(our_type.name)

        if container_cls is our_type:
            deserialization_snippet = Stripped(
                f"""\
var instance = Aas.Jsonization.Deserialize.{cls_name_csharp}From(
    node);"""
            )
            container_kind_directory = "SelfContained"
        else:
            deserialization_snippet = Stripped(
                f"""\
var container = Aas.Jsonization.Deserialize.{container_cls_csharp}From(
    node);

var instance = Aas.Tests.Common.MustFind<Aas.{cls_name_csharp}>(
    container);"""
            )
            assert (
                container_cls.name == "Environment"
            ), "Necessary for the container kind directory"
            container_kind_directory = "ContainedInEnvironment"

        indent = "   "
        blocks.append(
            Stripped(
                f"""\
public static Aas.{cls_name_csharp} LoadMaximal{cls_name_csharp}()
{{
    string path = Path.Combine(
        Aas.Tests.Common.TestDataDir,
        "Json",
        {csharp_common.string_literal(container_kind_directory)},
        "Expected",
        {csharp_common.string_literal(cls_name_json)},
        "maximal.json");

    var node = Aas.Tests.CommonJson.ReadFromFile(path);

    {aas_core_codegen.common.indent_but_first_line(deserialization_snippet, indent)}
    
    return instance;
}}  // public static Aas.{cls_name_csharp} LoadMaximal{cls_name_csharp}

public static Aas.{cls_name_csharp} LoadMinimal{cls_name_csharp}()
{{
    string path = Path.Combine(
        Aas.Tests.Common.TestDataDir,
        "Json",
        {csharp_common.string_literal(container_kind_directory)},
        "Expected",
        {csharp_common.string_literal(cls_name_json)},
        "minimal.json");

    var node = Aas.Tests.CommonJson.ReadFromFile(path);

    {aas_core_codegen.common.indent_but_first_line(deserialization_snippet, indent)}
    
    return instance;
}}  // public static Aas.{cls_name_csharp} LoadMinimal{cls_name_csharp}"""
            )
        )

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed
using Path = System.IO.Path;

namespace AasCore.Aas3_0.Tests
{
    /// <summary>
    /// Provide methods to load instances from JSON test data.
    /// </summary>
    public static class CommonJsonization
    {
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, "        "))

    writer.write(
        """
    }  // class CommonJsonization
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    target_pth = repo_root / "src/AasCore.Aas3_0.Tests/CommonJsonization.cs"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
