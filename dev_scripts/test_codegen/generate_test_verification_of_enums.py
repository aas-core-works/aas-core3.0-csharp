"""Generate the test code for the verification of enums."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.csharp.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped

from test_codegen.common import load_symbol_table


def main() -> int:
    """Execute the main routine."""
    symbol_table = load_symbol_table()

    # noinspection PyListCreation
    blocks = []  # type: List[str]

    for our_type in symbol_table.our_types:
        if not isinstance(our_type, intermediate.Enumeration):
            continue

        enum_name = aas_core_codegen.csharp.naming.enum_name(our_type.name)

        assert (
            len(our_type.literals) > 0
        ), f"Unexpected enumeration without literals: {our_type.name}"

        literal_name = aas_core_codegen.csharp.naming.enum_literal_name(
            our_type.literals[0].name
        )

        blocks.append(
            Stripped(
                f"""\
[Test]
public void Test_{enum_name}_valid()
{{
    var errors = Aas.Verification.Verify{enum_name}(
        Aas.{enum_name}.{literal_name}).ToList();
            
    Assert.IsEmpty(errors);
}}  // void Test_{enum_name}_valid

[Test]
public void Test_{enum_name}_invalid()
{{
    int valueAsInt = -1;
    Aas.{enum_name} value = (Aas.{enum_name})valueAsInt;
    
    var errors = Aas.Verification.Verify{enum_name}(
        value).ToList();
    
    Assert.AreEqual(1, errors.Count);
    Assert.AreEqual("Invalid {enum_name}: -1", errors[0].Cause);
}}  // void Test_{enum_name}_invalid"""
            )
        )

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed

using System.Linq;  // can't alias
using NUnit.Framework;  // can't alias

namespace AasCore.Aas3_0.Tests
{
    public class TestVerificationOfEnums
    {
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, "        "))

    writer.write(
        """
    }  // class TestVerificationOfEnums
}  // namespace AasCore.Aas3_0.Tests

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent

    target_pth = repo_root / "src/AasCore.Aas3_0.Tests/TestVerificationOfEnums.cs"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
